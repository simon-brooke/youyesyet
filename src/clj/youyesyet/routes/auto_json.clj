(ns
 youyesyet.routes.auto-json
 "JSON routes for youyesyet auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at 20180619T185150.149Z"
 (:require
  [adl-support.core :as support]
  [clojure.java.io :as io]
  [compojure.core :refer [defroutes GET POST]]
  [hugsql.core :as hugsql]
  [noir.response :as nresponse]
  [noir.util.route :as route]
  [ring.util.http-response :as response]
  [youyesyet.db.core :as db]))


(declare
 create-address!
 create-authority!
 create-canvasser!
 create-district!
 create-dwelling!
 create-elector!
 create-followupaction!
 create-followupmethod!
 create-followuprequest!
 create-gender!
 create-intention!
 create-issue!
 create-option!
 create-role!
 create-team!
 create-visit!
 delete-address!
 delete-authority!
 delete-canvasser!
 delete-district!
 delete-dwelling!
 delete-elector!
 delete-followupaction!
 delete-followupmethod!
 delete-followuprequest!
 delete-gender!
 delete-intention!
 delete-issue!
 delete-option!
 delete-role!
 delete-team!
 delete-visit!
 get-address
 get-authority
 get-canvasser
 get-canvasser-by-username
 get-district
 get-dwelling
 get-elector
 get-followupaction
 get-followupmethod
 get-followuprequest
 get-gender
 get-intention
 get-issue
 get-option
 get-role
 get-role-by-name
 get-team
 get-visit
 list-addresses
 list-addresses-by-district
 list-authorities
 list-canvassers
 list-canvassers-by-address
 list-canvassers-by-authority
 list-canvassers-by-elector
 list-canvassers-by-role
 list-districts
 list-dwellings
 list-dwellings-by-address
 list-electors
 list-electors-by-dwelling
 list-electors-by-gender
 list-followupactions
 list-followupactions-by-canvasser
 list-followupactions-by-followuprequest
 list-followupmethods
 list-followuprequests
 list-followuprequests-by-elector
 list-followuprequests-by-followupmethod
 list-followuprequests-by-issue
 list-followuprequests-by-visit
 list-genders
 list-intentions
 list-intentions-by-elector
 list-intentions-by-option
 list-intentions-by-visit
 list-issues
 list-options
 list-roles
 list-roles-by-canvasser
 list-teams
 list-teams-by-canvasser
 list-teams-by-district
 list-visits
 list-visits-by-address
 list-visits-by-canvasser
 search-strings-address
 search-strings-authority
 search-strings-canvasser
 search-strings-district
 search-strings-dwelling
 search-strings-elector
 search-strings-followupaction
 search-strings-followupmethod
 search-strings-followuprequest
 search-strings-gender
 search-strings-intention
 search-strings-issue
 search-strings-option
 search-strings-role
 search-strings-team
 search-strings-visit
 update-address!
 update-canvasser!
 update-district!
 update-dwelling!
 update-elector!
 update-followupaction!
 update-followuprequest!
 update-intention!
 update-issue!
 update-role!
 update-team!
 update-visit!)


(defroutes
 auto-rest-routes
 (POST
  "/json/auto/create-address"
  request
  (route/restricted (create-address! request)))
 (POST
  "/json/auto/create-authority"
  request
  (route/restricted (create-authority! request)))
 (POST
  "/json/auto/create-canvasser"
  request
  (route/restricted (create-canvasser! request)))
 (POST
  "/json/auto/create-district"
  request
  (route/restricted (create-district! request)))
 (POST
  "/json/auto/create-dwelling"
  request
  (route/restricted (create-dwelling! request)))
 (POST
  "/json/auto/create-elector"
  request
  (route/restricted (create-elector! request)))
 (POST
  "/json/auto/create-followupaction"
  request
  (route/restricted (create-followupaction! request)))
 (POST
  "/json/auto/create-followupmethod"
  request
  (route/restricted (create-followupmethod! request)))
 (POST
  "/json/auto/create-followuprequest"
  request
  (route/restricted (create-followuprequest! request)))
 (POST
  "/json/auto/create-gender"
  request
  (route/restricted (create-gender! request)))
 (POST
  "/json/auto/create-intention"
  request
  (route/restricted (create-intention! request)))
 (POST
  "/json/auto/create-issue"
  request
  (route/restricted (create-issue! request)))
 (POST
  "/json/auto/create-option"
  request
  (route/restricted (create-option! request)))
 (POST
  "/json/auto/create-role"
  request
  (route/restricted (create-role! request)))
 (POST
  "/json/auto/create-team"
  request
  (route/restricted (create-team! request)))
 (POST
  "/json/auto/create-visit"
  request
  (route/restricted (create-visit! request)))
 (POST
  "/json/auto/delete-address"
  request
  (route/restricted (delete-address! request)))
 (POST
  "/json/auto/delete-authority"
  request
  (route/restricted (delete-authority! request)))
 (POST
  "/json/auto/delete-canvasser"
  request
  (route/restricted (delete-canvasser! request)))
 (POST
  "/json/auto/delete-district"
  request
  (route/restricted (delete-district! request)))
 (POST
  "/json/auto/delete-dwelling"
  request
  (route/restricted (delete-dwelling! request)))
 (POST
  "/json/auto/delete-elector"
  request
  (route/restricted (delete-elector! request)))
 (POST
  "/json/auto/delete-followupaction"
  request
  (route/restricted (delete-followupaction! request)))
 (POST
  "/json/auto/delete-followupmethod"
  request
  (route/restricted (delete-followupmethod! request)))
 (POST
  "/json/auto/delete-followuprequest"
  request
  (route/restricted (delete-followuprequest! request)))
 (POST
  "/json/auto/delete-gender"
  request
  (route/restricted (delete-gender! request)))
 (POST
  "/json/auto/delete-intention"
  request
  (route/restricted (delete-intention! request)))
 (POST
  "/json/auto/delete-issue"
  request
  (route/restricted (delete-issue! request)))
 (POST
  "/json/auto/delete-option"
  request
  (route/restricted (delete-option! request)))
 (POST
  "/json/auto/delete-role"
  request
  (route/restricted (delete-role! request)))
 (POST
  "/json/auto/delete-team"
  request
  (route/restricted (delete-team! request)))
 (POST
  "/json/auto/delete-visit"
  request
  (route/restricted (delete-visit! request)))
 (POST
  "/json/auto/get-address"
  request
  (route/restricted (get-address request)))
 (POST
  "/json/auto/get-authority"
  request
  (route/restricted (get-authority request)))
 (POST
  "/json/auto/get-canvasser"
  request
  (route/restricted (get-canvasser request)))
 (POST
  "/json/auto/get-canvasser-by-username"
  request
  (route/restricted (get-canvasser-by-username request)))
 (POST
  "/json/auto/get-district"
  request
  (route/restricted (get-district request)))
 (POST
  "/json/auto/get-dwelling"
  request
  (route/restricted (get-dwelling request)))
 (POST
  "/json/auto/get-elector"
  request
  (route/restricted (get-elector request)))
 (POST
  "/json/auto/get-followupaction"
  request
  (route/restricted (get-followupaction request)))
 (POST
  "/json/auto/get-followupmethod"
  request
  (route/restricted (get-followupmethod request)))
 (POST
  "/json/auto/get-followuprequest"
  request
  (route/restricted (get-followuprequest request)))
 (POST
  "/json/auto/get-gender"
  request
  (route/restricted (get-gender request)))
 (POST
  "/json/auto/get-intention"
  request
  (route/restricted (get-intention request)))
 (POST
  "/json/auto/get-issue"
  request
  (route/restricted (get-issue request)))
 (POST
  "/json/auto/get-option"
  request
  (route/restricted (get-option request)))
 (POST
  "/json/auto/get-role"
  request
  (route/restricted (get-role request)))
 (POST
  "/json/auto/get-role-by-name"
  request
  (route/restricted (get-role-by-name request)))
 (POST
  "/json/auto/get-team"
  request
  (route/restricted (get-team request)))
 (POST
  "/json/auto/get-visit"
  request
  (route/restricted (get-visit request)))
 (GET
  "/json/auto/list-addresses"
  request
  (route/restricted (list-addresses request)))
 (GET
  "/json/auto/list-addresses-by-district"
  request
  (route/restricted (list-addresses-by-district request)))
 (GET
  "/json/auto/list-authorities"
  request
  (route/restricted (list-authorities request)))
 (GET
  "/json/auto/list-canvassers"
  request
  (route/restricted (list-canvassers request)))
 (GET
  "/json/auto/list-canvassers-by-address"
  request
  (route/restricted (list-canvassers-by-address request)))
 (GET
  "/json/auto/list-canvassers-by-authority"
  request
  (route/restricted (list-canvassers-by-authority request)))
 (GET
  "/json/auto/list-canvassers-by-elector"
  request
  (route/restricted (list-canvassers-by-elector request)))
 (GET
  "/json/auto/list-canvassers-by-role"
  request
  (route/restricted (list-canvassers-by-role request)))
 (GET
  "/json/auto/list-districts"
  request
  (route/restricted (list-districts request)))
 (GET
  "/json/auto/list-dwellings"
  request
  (route/restricted (list-dwellings request)))
 (GET
  "/json/auto/list-dwellings-by-address"
  request
  (route/restricted (list-dwellings-by-address request)))
 (GET
  "/json/auto/list-electors"
  request
  (route/restricted (list-electors request)))
 (GET
  "/json/auto/list-electors-by-dwelling"
  request
  (route/restricted (list-electors-by-dwelling request)))
 (GET
  "/json/auto/list-electors-by-gender"
  request
  (route/restricted (list-electors-by-gender request)))
 (GET
  "/json/auto/list-followupactions"
  request
  (route/restricted (list-followupactions request)))
 (GET
  "/json/auto/list-followupactions-by-canvasser"
  request
  (route/restricted (list-followupactions-by-canvasser request)))
 (GET
  "/json/auto/list-followupactions-by-followuprequest"
  request
  (route/restricted (list-followupactions-by-followuprequest request)))
 (GET
  "/json/auto/list-followupmethods"
  request
  (route/restricted (list-followupmethods request)))
 (GET
  "/json/auto/list-followuprequests"
  request
  (route/restricted (list-followuprequests request)))
 (GET
  "/json/auto/list-followuprequests-by-elector"
  request
  (route/restricted (list-followuprequests-by-elector request)))
 (GET
  "/json/auto/list-followuprequests-by-followupmethod"
  request
  (route/restricted (list-followuprequests-by-followupmethod request)))
 (GET
  "/json/auto/list-followuprequests-by-issue"
  request
  (route/restricted (list-followuprequests-by-issue request)))
 (GET
  "/json/auto/list-followuprequests-by-visit"
  request
  (route/restricted (list-followuprequests-by-visit request)))
 (GET
  "/json/auto/list-genders"
  request
  (route/restricted (list-genders request)))
 (GET
  "/json/auto/list-intentions"
  request
  (route/restricted (list-intentions request)))
 (GET
  "/json/auto/list-intentions-by-elector"
  request
  (route/restricted (list-intentions-by-elector request)))
 (GET
  "/json/auto/list-intentions-by-option"
  request
  (route/restricted (list-intentions-by-option request)))
 (GET
  "/json/auto/list-intentions-by-visit"
  request
  (route/restricted (list-intentions-by-visit request)))
 (GET
  "/json/auto/list-issues"
  request
  (route/restricted (list-issues request)))
 (GET
  "/json/auto/list-options"
  request
  (route/restricted (list-options request)))
 (GET
  "/json/auto/list-roles"
  request
  (route/restricted (list-roles request)))
 (GET
  "/json/auto/list-roles-by-canvasser"
  request
  (route/restricted (list-roles-by-canvasser request)))
 (GET
  "/json/auto/list-teams"
  request
  (route/restricted (list-teams request)))
 (GET
  "/json/auto/list-teams-by-canvasser"
  request
  (route/restricted (list-teams-by-canvasser request)))
 (GET
  "/json/auto/list-teams-by-district"
  request
  (route/restricted (list-teams-by-district request)))
 (GET
  "/json/auto/list-visits"
  request
  (route/restricted (list-visits request)))
 (GET
  "/json/auto/list-visits-by-address"
  request
  (route/restricted (list-visits-by-address request)))
 (GET
  "/json/auto/list-visits-by-canvasser"
  request
  (route/restricted (list-visits-by-canvasser request)))
 (GET
  "/json/auto/search-strings-address"
  request
  (route/restricted (search-strings-address request)))
 (GET
  "/json/auto/search-strings-authority"
  request
  (route/restricted (search-strings-authority request)))
 (GET
  "/json/auto/search-strings-canvasser"
  request
  (route/restricted (search-strings-canvasser request)))
 (GET
  "/json/auto/search-strings-district"
  request
  (route/restricted (search-strings-district request)))
 (GET
  "/json/auto/search-strings-dwelling"
  request
  (route/restricted (search-strings-dwelling request)))
 (GET
  "/json/auto/search-strings-elector"
  request
  (route/restricted (search-strings-elector request)))
 (GET
  "/json/auto/search-strings-followupaction"
  request
  (route/restricted (search-strings-followupaction request)))
 (GET
  "/json/auto/search-strings-followupmethod"
  request
  (route/restricted (search-strings-followupmethod request)))
 (GET
  "/json/auto/search-strings-followuprequest"
  request
  (route/restricted (search-strings-followuprequest request)))
 (GET
  "/json/auto/search-strings-gender"
  request
  (route/restricted (search-strings-gender request)))
 (GET
  "/json/auto/search-strings-intention"
  request
  (route/restricted (search-strings-intention request)))
 (GET
  "/json/auto/search-strings-issue"
  request
  (route/restricted (search-strings-issue request)))
 (GET
  "/json/auto/search-strings-option"
  request
  (route/restricted (search-strings-option request)))
 (GET
  "/json/auto/search-strings-role"
  request
  (route/restricted (search-strings-role request)))
 (GET
  "/json/auto/search-strings-team"
  request
  (route/restricted (search-strings-team request)))
 (GET
  "/json/auto/search-strings-visit"
  request
  (route/restricted (search-strings-visit request)))
 (POST
  "/json/auto/update-address"
  request
  (route/restricted (update-address! request)))
 (POST
  "/json/auto/update-canvasser"
  request
  (route/restricted (update-canvasser! request)))
 (POST
  "/json/auto/update-district"
  request
  (route/restricted (update-district! request)))
 (POST
  "/json/auto/update-dwelling"
  request
  (route/restricted (update-dwelling! request)))
 (POST
  "/json/auto/update-elector"
  request
  (route/restricted (update-elector! request)))
 (POST
  "/json/auto/update-followupaction"
  request
  (route/restricted (update-followupaction! request)))
 (POST
  "/json/auto/update-followuprequest"
  request
  (route/restricted (update-followuprequest! request)))
 (POST
  "/json/auto/update-intention"
  request
  (route/restricted (update-intention! request)))
 (POST
  "/json/auto/update-issue"
  request
  (route/restricted (update-issue! request)))
 (POST
  "/json/auto/update-role"
  request
  (route/restricted (update-role! request)))
 (POST
  "/json/auto/update-team"
  request
  (route/restricted (update-team! request)))
 (POST
  "/json/auto/update-visit"
  request
  (route/restricted (update-visit! request))))


(defn
 create-address!
 "Auto-generated method to insert one record to the `addresses` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-address! params)))

(defn
 create-authority!
 "Auto-generated method to insert one record to the `authorities` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-authority! params)))

(defn
 create-canvasser!
 "Auto-generated method to insert one record to the `canvassers` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-canvasser! params)))

(defn
 create-district!
 "Auto-generated method to insert one record to the `districts` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-district! params)))

(defn
 create-dwelling!
 "Auto-generated method to insert one record to the `dwellings` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-dwelling! params)))

(defn
 create-elector!
 "Auto-generated method to insert one record to the `electors` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-elector! params)))

(defn
 create-followupaction!
 "Auto-generated method to insert one record to the `followupactions` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-followupaction! params)))

(defn
 create-followupmethod!
 "Auto-generated method to insert one record to the `followupmethods` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-followupmethod! params)))

(defn
 create-followuprequest!
 "Auto-generated method to insert one record to the `followuprequests` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-followuprequest! params)))

(defn
 create-gender!
 "Auto-generated method to insert one record to the `genders` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-gender! params)))

(defn
 create-intention!
 "Auto-generated method to insert one record to the `intentions` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-intention! params)))

(defn
 create-issue!
 "Auto-generated method to insert one record to the `issues` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-issue! params)))

(defn
 create-option!
 "Auto-generated method to insert one record to the `options` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-option! params)))

(defn
 create-role!
 "Auto-generated method to insert one record to the `roles` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-role! params)))

(defn
 create-team!
 "Auto-generated method to insert one record to the `teams` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-team! params)))

(defn
 create-visit!
 "Auto-generated method to insert one record to the `visits` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the keys `nil` identifying the record created."
 [{:keys [params]}]
 (do (db/create-visit! params)))

(defn
 delete-address!
 "Auto-generated method to delete one record from the `addresses` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-address! params))
 (response/found "/"))

(defn
 delete-authority!
 "Auto-generated method to delete one record from the `authorities` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-authority! params))
 (response/found "/"))

(defn
 delete-canvasser!
 "Auto-generated method to delete one record from the `canvassers` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-canvasser! params))
 (response/found "/"))

(defn
 delete-district!
 "Auto-generated method to delete one record from the `districts` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-district! params))
 (response/found "/"))

(defn
 delete-dwelling!
 "Auto-generated method to delete one record from the `dwellings` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-dwelling! params))
 (response/found "/"))

(defn
 delete-elector!
 "Auto-generated method to delete one record from the `electors` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-elector! params))
 (response/found "/"))

(defn
 delete-followupaction!
 "Auto-generated method to delete one record from the `followupactions` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-followupaction! params))
 (response/found "/"))

(defn
 delete-followupmethod!
 "Auto-generated method to delete one record from the `followupmethods` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-followupmethod! params))
 (response/found "/"))

(defn
 delete-followuprequest!
 "Auto-generated method to delete one record from the `followuprequests` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-followuprequest! params))
 (response/found "/"))

(defn
 delete-gender!
 "Auto-generated method to delete one record from the `genders` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-gender! params))
 (response/found "/"))

(defn
 delete-intention!
 "Auto-generated method to delete one record from the `intentions` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-intention! params))
 (response/found "/"))

(defn
 delete-issue!
 "Auto-generated method to delete one record from the `issues` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-issue! params))
 (response/found "/"))

(defn
 delete-option!
 "Auto-generated method to delete one record from the `options` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-option! params))
 (response/found "/"))

(defn
 delete-role!
 "Auto-generated method to delete one record from the `roles` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-role! params))
 (response/found "/"))

(defn
 delete-team!
 "Auto-generated method to delete one record from the `teams` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-team! params))
 (response/found "/"))

(defn
 delete-visit!
 "Auto-generated method to delete one record from the `visits` table. Expects the following key(s) to be present in `params`: ``."
 [{:keys [params]}]
 (do (db/delete-visit! params))
 (response/found "/"))

(defn
 get-address
 "Auto-generated method to select one record from the `addresses` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-address params)))

(defn
 get-authority
 "Auto-generated method to select one record from the `authorities` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-authority params)))

(defn
 get-canvasser
 "Auto-generated method to select one record from the `canvassers` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-canvasser params)))

(defn
 get-canvasser-by-username
 "Auto-generated method to select one record from the `canvassers` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-canvasser-by-username params)))

(defn
 get-district
 "Auto-generated method to select one record from the `districts` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-district params)))

(defn
 get-dwelling
 "Auto-generated method to select one record from the `dwellings` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-dwelling params)))

(defn
 get-elector
 "Auto-generated method to select one record from the `electors` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-elector params)))

(defn
 get-followupaction
 "Auto-generated method to select one record from the `followupactions` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-followupaction params)))

(defn
 get-followupmethod
 "Auto-generated method to select one record from the `followupmethods` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-followupmethod params)))

(defn
 get-followuprequest
 "Auto-generated method to select one record from the `followuprequests` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-followuprequest params)))

(defn
 get-gender
 "Auto-generated method to select one record from the `genders` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-gender params)))

(defn
 get-intention
 "Auto-generated method to select one record from the `intentions` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-intention params)))

(defn
 get-issue
 "Auto-generated method to select one record from the `issues` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-issue params)))

(defn
 get-option
 "Auto-generated method to select one record from the `options` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-option params)))

(defn
 get-role
 "Auto-generated method to select one record from the `roles` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-role params)))

(defn
 get-role-by-name
 "Auto-generated method to select one record from the `roles` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-role-by-name params)))

(defn
 get-team
 "Auto-generated method to select one record from the `teams` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-team params)))

(defn
 get-visit
 "Auto-generated method to select one record from the `visits` table. Expects the following key(s) to be present in `params`: `nil`. Returns a map containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/get-visit params)))

(defn
 list-addresses
 "Auto-generated method to select all records from the `addresses` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-addresses params)))

(defn
 list-addresses-by-district
 [{:keys [params]}]
 (do (db/list-addresses-by-district params)))

(defn
 list-authorities
 "Auto-generated method to select all records from the `authorities` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-authorities params)))

(defn
 list-canvassers
 "Auto-generated method to select all records from the `canvassers` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-canvassers params)))

(defn
 list-canvassers-by-address
 [{:keys [params]}]
 (do (db/list-canvassers-by-address params)))

(defn
 list-canvassers-by-authority
 [{:keys [params]}]
 (do (db/list-canvassers-by-authority params)))

(defn
 list-canvassers-by-elector
 [{:keys [params]}]
 (do (db/list-canvassers-by-elector params)))

(defn
 list-canvassers-by-role
 [{:keys [params]}]
 (do (db/list-canvassers-by-role params)))

(defn
 list-districts
 "Auto-generated method to select all records from the `districts` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-districts params)))

(defn
 list-dwellings
 "Auto-generated method to select all records from the `dwellings` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-dwellings params)))

(defn
 list-dwellings-by-address
 [{:keys [params]}]
 (do (db/list-dwellings-by-address params)))

(defn
 list-electors
 "Auto-generated method to select all records from the `electors` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-electors params)))

(defn
 list-electors-by-dwelling
 [{:keys [params]}]
 (do (db/list-electors-by-dwelling params)))

(defn
 list-electors-by-gender
 [{:keys [params]}]
 (do (db/list-electors-by-gender params)))

(defn
 list-followupactions
 "Auto-generated method to select all records from the `followupactions` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-followupactions params)))

(defn
 list-followupactions-by-canvasser
 [{:keys [params]}]
 (do (db/list-followupactions-by-canvasser params)))

(defn
 list-followupactions-by-followuprequest
 [{:keys [params]}]
 (do (db/list-followupactions-by-followuprequest params)))

(defn
 list-followupmethods
 "Auto-generated method to select all records from the `followupmethods` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-followupmethods params)))

(defn
 list-followuprequests
 "Auto-generated method to select all records from the `followuprequests` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-followuprequests params)))

(defn
 list-followuprequests-by-elector
 [{:keys [params]}]
 (do (db/list-followuprequests-by-elector params)))

(defn
 list-followuprequests-by-followupmethod
 [{:keys [params]}]
 (do (db/list-followuprequests-by-followupmethod params)))

(defn
 list-followuprequests-by-issue
 [{:keys [params]}]
 (do (db/list-followuprequests-by-issue params)))

(defn
 list-followuprequests-by-visit
 [{:keys [params]}]
 (do (db/list-followuprequests-by-visit params)))

(defn
 list-genders
 "Auto-generated method to select all records from the `genders` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-genders params)))

(defn
 list-intentions
 "Auto-generated method to select all records from the `intentions` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-intentions params)))

(defn
 list-intentions-by-elector
 [{:keys [params]}]
 (do (db/list-intentions-by-elector params)))

(defn
 list-intentions-by-option
 [{:keys [params]}]
 (do (db/list-intentions-by-option params)))

(defn
 list-intentions-by-visit
 [{:keys [params]}]
 (do (db/list-intentions-by-visit params)))

(defn
 list-issues
 "Auto-generated method to select all records from the `issues` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-issues params)))

(defn
 list-options
 "Auto-generated method to select all records from the `options` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-options params)))

(defn
 list-roles
 "Auto-generated method to select all records from the `roles` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-roles params)))

(defn
 list-roles-by-canvasser
 [{:keys [params]}]
 (do (db/list-roles-by-canvasser params)))

(defn
 list-teams
 "Auto-generated method to select all records from the `teams` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-teams params)))

(defn
 list-teams-by-canvasser
 [{:keys [params]}]
 (do (db/list-teams-by-canvasser params)))

(defn
 list-teams-by-district
 [{:keys [params]}]
 (do (db/list-teams-by-district params)))

(defn
 list-visits
 "Auto-generated method to select all records from the `visits` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/list-visits params)))

(defn
 list-visits-by-address
 [{:keys [params]}]
 (do (db/list-visits-by-address params)))

(defn
 list-visits-by-canvasser
 [{:keys [params]}]
 (do (db/list-visits-by-canvasser params)))

(defn
 search-strings-address
 "Auto-generated method to select all records from the `addresses` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-address params)))

(defn
 search-strings-authority
 "Auto-generated method to select all records from the `authorities` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-authority params)))

(defn
 search-strings-canvasser
 "Auto-generated method to select all records from the `canvassers` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-canvasser params)))

(defn
 search-strings-district
 "Auto-generated method to select all records from the `districts` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-district params)))

(defn
 search-strings-dwelling
 "Auto-generated method to select all records from the `dwellings` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-dwelling params)))

(defn
 search-strings-elector
 "Auto-generated method to select all records from the `electors` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-elector params)))

(defn
 search-strings-followupaction
 "Auto-generated method to select all records from the `followupactions` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-followupaction params)))

(defn
 search-strings-followupmethod
 "Auto-generated method to select all records from the `followupmethods` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-followupmethod params)))

(defn
 search-strings-followuprequest
 "Auto-generated method to select all records from the `followuprequests` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-followuprequest params)))

(defn
 search-strings-gender
 "Auto-generated method to select all records from the `genders` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-gender params)))

(defn
 search-strings-intention
 "Auto-generated method to select all records from the `intentions` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-intention params)))

(defn
 search-strings-issue
 "Auto-generated method to select all records from the `issues` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-issue params)))

(defn
 search-strings-option
 "Auto-generated method to select all records from the `options` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-option params)))

(defn
 search-strings-role
 "Auto-generated method to select all records from the `roles` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-role params)))

(defn
 search-strings-team
 "Auto-generated method to select all records from the `teams` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-team params)))

(defn
 search-strings-visit
 "Auto-generated method to select all records from the `visits` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(nil)`."
 [{:keys [params]}]
 (do (db/search-strings-visit params)))

(defn
 update-address!
 "Auto-generated method to update one record in the `addresses` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-address! params))
 (response/found "/"))

(defn
 update-canvasser!
 "Auto-generated method to update one record in the `canvassers` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-canvasser! params))
 (response/found "/"))

(defn
 update-district!
 "Auto-generated method to update one record in the `districts` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-district! params))
 (response/found "/"))

(defn
 update-dwelling!
 "Auto-generated method to update one record in the `dwellings` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-dwelling! params))
 (response/found "/"))

(defn
 update-elector!
 "Auto-generated method to update one record in the `electors` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-elector! params))
 (response/found "/"))

(defn
 update-followupaction!
 "Auto-generated method to update one record in the `followupactions` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-followupaction! params))
 (response/found "/"))

(defn
 update-followuprequest!
 "Auto-generated method to update one record in the `followuprequests` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-followuprequest! params))
 (response/found "/"))

(defn
 update-intention!
 "Auto-generated method to update one record in the `intentions` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-intention! params))
 (response/found "/"))

(defn
 update-issue!
 "Auto-generated method to update one record in the `issues` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-issue! params))
 (response/found "/"))

(defn
 update-role!
 "Auto-generated method to update one record in the `roles` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-role! params))
 (response/found "/"))

(defn
 update-team!
 "Auto-generated method to update one record in the `teams` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-team! params))
 (response/found "/"))

(defn
 update-visit!
 "Auto-generated method to update one record in the `visits` table. Expects the following key(s) to be present in `params`: `(nil)`."
 [{:keys [params]}]
 (do (db/update-visit! params))
 (response/found "/"))

