(ns
 youyesyet.routes.auto-json
 "JSON routes for youyesyet auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at 20180703T122350.619Z"
 (:require
  [adl-support.core :as support]
  [clojure.java.io :as io]
  [clojure.core.memoize :as memo]
  [compojure.core :refer [defroutes GET POST]]
  [hugsql.core :as hugsql]
  [noir.response :as nresponse]
  [noir.util.route :as route]
  [ring.util.http-response :as response]
  [youyesyet.db.core :as db]))

(defn
 create-address!
 "Auto-generated method to insert one record to the `addresses` table. Expects the following key(s) to be present in `params`: `(:address :postcode :phone :district_id :latitude :longitude :locality)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-address! db/*db* params)]
  (response/ok result)))

(defn
 create-authority!
 "Auto-generated method to insert one record to the `authorities` table. Expects the following key(s) to be present in `params`: `(:request-token-uri :access-token-uri :authorize-uri :consumer-key :consumer-secret :id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-authority! db/*db* params)]
  (response/ok result)))

(defn
 create-canvasser!
 "Auto-generated method to insert one record to the `canvassers` table. Expects the following key(s) to be present in `params`: `(:username :fullname :elector_id :address_id :phone :email :authority_id :authorised)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-canvasser! db/*db* params)]
  (response/ok result)))

(defn
 create-district!
 "Auto-generated method to insert one record to the `districts` table. Expects the following key(s) to be present in `params`: `(:name)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-district! db/*db* params)]
  (response/ok result)))

(defn
 create-dwelling!
 "Auto-generated method to insert one record to the `dwellings` table. Expects the following key(s) to be present in `params`: `(:address_id :sub-address)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-dwelling! db/*db* params)]
  (response/ok result)))

(defn
 create-elector!
 "Auto-generated method to insert one record to the `electors` table. Expects the following key(s) to be present in `params`: `(:name :dwelling_id :phone :email :gender)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-elector! db/*db* params)]
  (response/ok result)))

(defn
 create-followupaction!
 "Auto-generated method to insert one record to the `followupactions` table. Expects the following key(s) to be present in `params`: `(:request_id :actor :date :notes :closed)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-followupaction! db/*db* params)]
  (response/ok result)))

(defn
 create-followupmethod!
 "Auto-generated method to insert one record to the `followupmethods` table. Expects the following key(s) to be present in `params`: `(:id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-followupmethod! db/*db* params)]
  (response/ok result)))

(defn
 create-followuprequest!
 "Auto-generated method to insert one record to the `followuprequests` table. Expects the following key(s) to be present in `params`: `(:elector_id :visit_id :issue_id :method_id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-followuprequest! db/*db* params)]
  (response/ok result)))

(defn
 create-gender!
 "Auto-generated method to insert one record to the `genders` table. Expects the following key(s) to be present in `params`: `(:id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-gender! db/*db* params)] (response/ok result)))

(defn
 create-intention!
 "Auto-generated method to insert one record to the `intentions` table. Expects the following key(s) to be present in `params`: `(:visit_id :elector_id :option_id :locality)`. Returns a map containing the keys `#{\"Id\"}` identifying the record created."
 [{:keys [params]}]
 (let
  [result (db/create-intention! db/*db* params)]
  (response/ok result)))

(defn
 create-issue!
 "Auto-generated method to insert one record to the `issues` table. Expects the following key(s) to be present in `params`: `(:url :current :brief :id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-issue! db/*db* params)] (response/ok result)))

(defn
 create-option!
 "Auto-generated method to insert one record to the `options` table. Expects the following key(s) to be present in `params`: `(:id)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-option! db/*db* params)] (response/ok result)))

(defn
 create-role!
 "Auto-generated method to insert one record to the `roles` table. Expects the following key(s) to be present in `params`: `(:name)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-role! db/*db* params)] (response/ok result)))

(defn
 create-team!
 "Auto-generated method to insert one record to the `teams` table. Expects the following key(s) to be present in `params`: `(:name :district_id :latitude :longitude)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-team! db/*db* params)] (response/ok result)))

(defn
 create-visit!
 "Auto-generated method to insert one record to the `visits` table. Expects the following key(s) to be present in `params`: `(:address_id :canvasser_id :date)`. Returns a map containing the keys `#{\"id\"}` identifying the record created."
 [{:keys [params]}]
 (let [result (db/create-visit! db/*db* params)] (response/ok result)))

(defn
 delete-address!
 "Auto-generated method to delete one record from the `addresses` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-address! db/*db* params)]
  (response/found "/")))

(defn
 delete-authority!
 "Auto-generated method to delete one record from the `authorities` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-authority! db/*db* params)]
  (response/found "/")))

(defn
 delete-canvasser!
 "Auto-generated method to delete one record from the `canvassers` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-canvasser! db/*db* params)]
  (response/found "/")))

(defn
 delete-district!
 "Auto-generated method to delete one record from the `districts` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-district! db/*db* params)]
  (response/found "/")))

(defn
 delete-dwelling!
 "Auto-generated method to delete one record from the `dwellings` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-dwelling! db/*db* params)]
  (response/found "/")))

(defn
 delete-elector!
 "Auto-generated method to delete one record from the `electors` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-elector! db/*db* params)]
  (response/found "/")))

(defn
 delete-followupaction!
 "Auto-generated method to delete one record from the `followupactions` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-followupaction! db/*db* params)]
  (response/found "/")))

(defn
 delete-followupmethod!
 "Auto-generated method to delete one record from the `followupmethods` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-followupmethod! db/*db* params)]
  (response/found "/")))

(defn
 delete-followuprequest!
 "Auto-generated method to delete one record from the `followuprequests` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-followuprequest! db/*db* params)]
  (response/found "/")))

(defn
 delete-gender!
 "Auto-generated method to delete one record from the `genders` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-gender! db/*db* params)] (response/found "/")))

(defn
 delete-intention!
 "Auto-generated method to delete one record from the `intentions` table. Expects the following key(s) to be present in `params`: `#{\"Id\"}`."
 [{:keys [params]}]
 (let
  [result (db/delete-intention! db/*db* params)]
  (response/found "/")))

(defn
 delete-issue!
 "Auto-generated method to delete one record from the `issues` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-issue! db/*db* params)] (response/found "/")))

(defn
 delete-option!
 "Auto-generated method to delete one record from the `options` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-option! db/*db* params)] (response/found "/")))

(defn
 delete-role!
 "Auto-generated method to delete one record from the `roles` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-role! db/*db* params)] (response/found "/")))

(defn
 delete-team!
 "Auto-generated method to delete one record from the `teams` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-team! db/*db* params)] (response/found "/")))

(defn
 delete-visit!
 "Auto-generated method to delete one record from the `visits` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`."
 [{:keys [params]}]
 (let [result (db/delete-visit! db/*db* params)] (response/found "/")))

(def
 get-address
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-address db/*db* params)] (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 get-authority
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-authority db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-canvasser
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-canvasser db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000))

(def
 get-canvasser-by-username
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-canvasser-by-username db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000))

(def
 get-district
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-district db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-dwelling
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-dwelling db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 get-elector
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-elector db/*db* params)] (response/ok result)))
  :ttl/threshold
  100000000))

(defn
 get-followupaction
 "Auto-generated method to select one record from the `followupactions` table. Expects the following key(s) to be present in `params`: `#{\"id\"}`. Returns a map containing the following keys: `clojure.lang.LazySeq@6b32af0e`."
 [{:keys [params]}]
 (let
  [result (db/get-followupaction db/*db* params)]
  (response/ok result)))

(def
 get-followupmethod
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-followupmethod db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-followuprequest
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-followuprequest db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(def
 get-gender
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-gender db/*db* params)] (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 get-intention
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-intention db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(def
 get-issue
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-issue db/*db* params)] (response/ok result)))
  :ttl/threshold
  1000000))

(def
 get-option
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-option db/*db* params)] (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-role
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-role db/*db* params)] (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-role-by-name
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/get-role-by-name db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 get-team
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-team db/*db* params)] (response/ok result)))
  :ttl/threshold
  10000000))

(def
 get-visit
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/get-visit db/*db* params)] (response/ok result)))
  :ttl/threshold
  100000))

(def
 list-addresses
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-addresses db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(defn
 list-addresses-by-district
 [{:keys [params]}]
 (do (db/list-addresses-by-district params)))

(def
 list-authorities
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-authorities db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 list-canvassers
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-canvassers db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000))

(defn
 list-canvassers-by-address
 [{:keys [params]}]
 (do (db/list-canvassers-by-address params)))

(defn
 list-canvassers-by-authority
 [{:keys [params]}]
 (do (db/list-canvassers-by-authority params)))

(defn
 list-canvassers-by-elector
 [{:keys [params]}]
 (do (db/list-canvassers-by-elector params)))

(defn
 list-canvassers-by-role
 [{:keys [params]}]
 (do (db/list-canvassers-by-role params)))

(def
 list-districts
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-districts db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 list-dwellings
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-dwellings db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(defn
 list-dwellings-by-address
 [{:keys [params]}]
 (do (db/list-dwellings-by-address params)))

(def
 list-electors
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-electors db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000000))

(defn
 list-electors-by-dwelling
 [{:keys [params]}]
 (do (db/list-electors-by-dwelling params)))

(defn
 list-electors-by-gender
 [{:keys [params]}]
 (do (db/list-electors-by-gender params)))

(defn
 list-followupactions
 "Auto-generated method to select all records from the `followupactions` table. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(:request_id :actor :date :notes :closed :id)`."
 [{:keys [params]}]
 (let
  [result (db/list-followupactions db/*db* params)]
  (response/ok result)))

(defn
 list-followupactions-by-canvasser
 [{:keys [params]}]
 (do (db/list-followupactions-by-canvasser params)))

(defn
 list-followupactions-by-followuprequest
 [{:keys [params]}]
 (do (db/list-followupactions-by-followuprequest params)))

(def
 list-followupmethods
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-followupmethods db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 list-followuprequests
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-followuprequests db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(defn
 list-followuprequests-by-elector
 [{:keys [params]}]
 (do (db/list-followuprequests-by-elector params)))

(defn
 list-followuprequests-by-followupmethod
 [{:keys [params]}]
 (do (db/list-followuprequests-by-followupmethod params)))

(defn
 list-followuprequests-by-issue
 [{:keys [params]}]
 (do (db/list-followuprequests-by-issue params)))

(defn
 list-followuprequests-by-visit
 [{:keys [params]}]
 (do (db/list-followuprequests-by-visit params)))

(def
 list-genders
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-genders db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 list-intentions
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-intentions db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(defn
 list-intentions-by-elector
 [{:keys [params]}]
 (do (db/list-intentions-by-elector params)))

(defn
 list-intentions-by-option
 [{:keys [params]}]
 (do (db/list-intentions-by-option params)))

(defn
 list-intentions-by-visit
 [{:keys [params]}]
 (do (db/list-intentions-by-visit params)))

(def
 list-issues
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/list-issues db/*db* params)] (response/ok result)))
  :ttl/threshold
  1000000))

(def
 list-options
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/list-options db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 list-roles
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/list-roles db/*db* params)] (response/ok result)))
  :ttl/threshold
  10000000000))

(defn
 list-roles-by-canvasser
 [{:keys [params]}]
 (do (db/list-roles-by-canvasser params)))

(def
 list-teams
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/list-teams db/*db* params)] (response/ok result)))
  :ttl/threshold
  10000000))

(defn
 list-teams-by-canvasser
 [{:keys [params]}]
 (do (db/list-teams-by-canvasser params)))

(defn
 list-teams-by-district
 [{:keys [params]}]
 (do (db/list-teams-by-district params)))

(def
 list-visits
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let [result (db/list-visits db/*db* params)] (response/ok result)))
  :ttl/threshold
  100000))

(defn
 list-visits-by-address
 [{:keys [params]}]
 (do (db/list-visits-by-address params)))

(defn
 list-visits-by-canvasser
 [{:keys [params]}]
 (do (db/list-visits-by-canvasser params)))

(def
 search-strings-address
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-address db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 search-strings-authority
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-authority db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 search-strings-canvasser
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-canvasser db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000))

(def
 search-strings-district
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-district db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 search-strings-dwelling
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-dwelling db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 search-strings-elector
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-elector db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000000))

(defn
 search-strings-followupaction
 "Auto-generated method to select all records from the `followupactions` table with any text field matching the value of the key `:pattern` which should be in the request. If the keys `(:limit :offset)` are present in the request then they will be used to page through the data. Returns a sequence of maps each containing the following keys: `(:request_id :actor :date :notes :closed :id)`."
 [{:keys [params]}]
 (let
  [result (db/search-strings-followupaction db/*db* params)]
  (response/ok result)))

(def
 search-strings-followupmethod
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-followupmethod db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 search-strings-followuprequest
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-followuprequest db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(def
 search-strings-gender
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-gender db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000000))

(def
 search-strings-intention
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-intention db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(def
 search-strings-issue
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-issue db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  1000000))

(def
 search-strings-option
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-option db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 search-strings-role
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-role db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000000))

(def
 search-strings-team
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-team db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  10000000))

(def
 search-strings-visit
 (memo/ttl
  (fn
   [{:keys [params]}]
   (let
    [result (db/search-strings-visit db/*db* params)]
    (response/ok result)))
  :ttl/threshold
  100000))

(defn
 update-address!
 "Auto-generated method to update one record in the `addresses` table. Expects the following key(s) to be present in `params`: `(:address :district_id :id :latitude :locality :longitude :phone :postcode)`."
 [{:keys [params]}]
 (let
  [result (db/update-address! db/*db* params)]
  (response/found "/")))

(defn
 update-authority!
 "Auto-generated method to update one record in the `authorities` table. Expects the following key(s) to be present in `params`: `(:access-token-uri :authorize-uri :consumer-key :consumer-secret :id :request-token-uri)`."
 [{:keys [params]}]
 (let
  [result (db/update-authority! db/*db* params)]
  (response/found "/")))

(defn
 update-canvasser!
 "Auto-generated method to update one record in the `canvassers` table. Expects the following key(s) to be present in `params`: `(:address_id :authorised :authority_id :elector_id :email :fullname :id :phone :username)`."
 [{:keys [params]}]
 (let
  [result (db/update-canvasser! db/*db* params)]
  (response/found "/")))

(defn
 update-district!
 "Auto-generated method to update one record in the `districts` table. Expects the following key(s) to be present in `params`: `(:id :name)`."
 [{:keys [params]}]
 (let
  [result (db/update-district! db/*db* params)]
  (response/found "/")))

(defn
 update-dwelling!
 "Auto-generated method to update one record in the `dwellings` table. Expects the following key(s) to be present in `params`: `(:address_id :id :sub-address)`."
 [{:keys [params]}]
 (let
  [result (db/update-dwelling! db/*db* params)]
  (response/found "/")))

(defn
 update-elector!
 "Auto-generated method to update one record in the `electors` table. Expects the following key(s) to be present in `params`: `(:dwelling_id :email :gender :id :name :phone)`."
 [{:keys [params]}]
 (let
  [result (db/update-elector! db/*db* params)]
  (response/found "/")))

(defn
 update-followupaction!
 "Auto-generated method to update one record in the `followupactions` table. Expects the following key(s) to be present in `params`: `(:actor :closed :date :id :notes :request_id)`."
 [{:keys [params]}]
 (let
  [result (db/update-followupaction! db/*db* params)]
  (response/found "/")))

(defn
 update-followuprequest!
 "Auto-generated method to update one record in the `followuprequests` table. Expects the following key(s) to be present in `params`: `(:elector_id :id :issue_id :method_id :visit_id)`."
 [{:keys [params]}]
 (let
  [result (db/update-followuprequest! db/*db* params)]
  (response/found "/")))

(defn
 update-intention!
 "Auto-generated method to update one record in the `intentions` table. Expects the following key(s) to be present in `params`: `(:Id :elector_id :locality :option_id :visit_id)`."
 [{:keys [params]}]
 (let
  [result (db/update-intention! db/*db* params)]
  (response/found "/")))

(defn
 update-issue!
 "Auto-generated method to update one record in the `issues` table. Expects the following key(s) to be present in `params`: `(:brief :current :id :url)`."
 [{:keys [params]}]
 (let [result (db/update-issue! db/*db* params)] (response/found "/")))

(defn
 update-role!
 "Auto-generated method to update one record in the `roles` table. Expects the following key(s) to be present in `params`: `(:id :name)`."
 [{:keys [params]}]
 (let [result (db/update-role! db/*db* params)] (response/found "/")))

(defn
 update-team!
 "Auto-generated method to update one record in the `teams` table. Expects the following key(s) to be present in `params`: `(:district_id :id :latitude :longitude :name)`."
 [{:keys [params]}]
 (let [result (db/update-team! db/*db* params)] (response/found "/")))

(defn
 update-visit!
 "Auto-generated method to update one record in the `visits` table. Expects the following key(s) to be present in `params`: `(:address_id :canvasser_id :date :id)`."
 [{:keys [params]}]
 (let [result (db/update-visit! db/*db* params)] (response/found "/")))

(defroutes
 auto-rest-routes
 (POST
  "/json/auto/create-address"
  request
  (route/restricted (create-address! request)))
 (POST
  "/json/auto/create-authority"
  request
  (route/restricted (create-authority! request)))
 (POST
  "/json/auto/create-canvasser"
  request
  (route/restricted (create-canvasser! request)))
 (POST
  "/json/auto/create-district"
  request
  (route/restricted (create-district! request)))
 (POST
  "/json/auto/create-dwelling"
  request
  (route/restricted (create-dwelling! request)))
 (POST
  "/json/auto/create-elector"
  request
  (route/restricted (create-elector! request)))
 (POST
  "/json/auto/create-followupaction"
  request
  (route/restricted (create-followupaction! request)))
 (POST
  "/json/auto/create-followupmethod"
  request
  (route/restricted (create-followupmethod! request)))
 (POST
  "/json/auto/create-followuprequest"
  request
  (route/restricted (create-followuprequest! request)))
 (POST
  "/json/auto/create-gender"
  request
  (route/restricted (create-gender! request)))
 (POST
  "/json/auto/create-intention"
  request
  (route/restricted (create-intention! request)))
 (POST
  "/json/auto/create-issue"
  request
  (route/restricted (create-issue! request)))
 (POST
  "/json/auto/create-option"
  request
  (route/restricted (create-option! request)))
 (POST
  "/json/auto/create-role"
  request
  (route/restricted (create-role! request)))
 (POST
  "/json/auto/create-team"
  request
  (route/restricted (create-team! request)))
 (POST
  "/json/auto/create-visit"
  request
  (route/restricted (create-visit! request)))
 (POST
  "/json/auto/delete-address"
  request
  (route/restricted (delete-address! request)))
 (POST
  "/json/auto/delete-authority"
  request
  (route/restricted (delete-authority! request)))
 (POST
  "/json/auto/delete-canvasser"
  request
  (route/restricted (delete-canvasser! request)))
 (POST
  "/json/auto/delete-district"
  request
  (route/restricted (delete-district! request)))
 (POST
  "/json/auto/delete-dwelling"
  request
  (route/restricted (delete-dwelling! request)))
 (POST
  "/json/auto/delete-elector"
  request
  (route/restricted (delete-elector! request)))
 (POST
  "/json/auto/delete-followupaction"
  request
  (route/restricted (delete-followupaction! request)))
 (POST
  "/json/auto/delete-followupmethod"
  request
  (route/restricted (delete-followupmethod! request)))
 (POST
  "/json/auto/delete-followuprequest"
  request
  (route/restricted (delete-followuprequest! request)))
 (POST
  "/json/auto/delete-gender"
  request
  (route/restricted (delete-gender! request)))
 (POST
  "/json/auto/delete-intention"
  request
  (route/restricted (delete-intention! request)))
 (POST
  "/json/auto/delete-issue"
  request
  (route/restricted (delete-issue! request)))
 (POST
  "/json/auto/delete-option"
  request
  (route/restricted (delete-option! request)))
 (POST
  "/json/auto/delete-role"
  request
  (route/restricted (delete-role! request)))
 (POST
  "/json/auto/delete-team"
  request
  (route/restricted (delete-team! request)))
 (POST
  "/json/auto/delete-visit"
  request
  (route/restricted (delete-visit! request)))
 (POST
  "/json/auto/get-address"
  request
  (route/restricted (get-address request)))
 (POST
  "/json/auto/get-authority"
  request
  (route/restricted (get-authority request)))
 (POST
  "/json/auto/get-canvasser"
  request
  (route/restricted (get-canvasser request)))
 (POST
  "/json/auto/get-canvasser-by-username"
  request
  (route/restricted (get-canvasser-by-username request)))
 (POST
  "/json/auto/get-district"
  request
  (route/restricted (get-district request)))
 (POST
  "/json/auto/get-dwelling"
  request
  (route/restricted (get-dwelling request)))
 (POST
  "/json/auto/get-elector"
  request
  (route/restricted (get-elector request)))
 (POST
  "/json/auto/get-followupaction"
  request
  (route/restricted (get-followupaction request)))
 (POST
  "/json/auto/get-followupmethod"
  request
  (route/restricted (get-followupmethod request)))
 (POST
  "/json/auto/get-followuprequest"
  request
  (route/restricted (get-followuprequest request)))
 (POST
  "/json/auto/get-gender"
  request
  (route/restricted (get-gender request)))
 (POST
  "/json/auto/get-intention"
  request
  (route/restricted (get-intention request)))
 (POST
  "/json/auto/get-issue"
  request
  (route/restricted (get-issue request)))
 (POST
  "/json/auto/get-option"
  request
  (route/restricted (get-option request)))
 (POST
  "/json/auto/get-role"
  request
  (route/restricted (get-role request)))
 (POST
  "/json/auto/get-role-by-name"
  request
  (route/restricted (get-role-by-name request)))
 (POST
  "/json/auto/get-team"
  request
  (route/restricted (get-team request)))
 (POST
  "/json/auto/get-visit"
  request
  (route/restricted (get-visit request)))
 (GET
  "/json/auto/list-addresses"
  request
  (route/restricted (list-addresses request)))
 (GET
  "/json/auto/list-addresses-by-district"
  request
  (route/restricted (list-addresses-by-district request)))
 (GET
  "/json/auto/list-authorities"
  request
  (route/restricted (list-authorities request)))
 (GET
  "/json/auto/list-canvassers"
  request
  (route/restricted (list-canvassers request)))
 (GET
  "/json/auto/list-canvassers-by-address"
  request
  (route/restricted (list-canvassers-by-address request)))
 (GET
  "/json/auto/list-canvassers-by-authority"
  request
  (route/restricted (list-canvassers-by-authority request)))
 (GET
  "/json/auto/list-canvassers-by-elector"
  request
  (route/restricted (list-canvassers-by-elector request)))
 (GET
  "/json/auto/list-canvassers-by-role"
  request
  (route/restricted (list-canvassers-by-role request)))
 (GET
  "/json/auto/list-districts"
  request
  (route/restricted (list-districts request)))
 (GET
  "/json/auto/list-dwellings"
  request
  (route/restricted (list-dwellings request)))
 (GET
  "/json/auto/list-dwellings-by-address"
  request
  (route/restricted (list-dwellings-by-address request)))
 (GET
  "/json/auto/list-electors"
  request
  (route/restricted (list-electors request)))
 (GET
  "/json/auto/list-electors-by-dwelling"
  request
  (route/restricted (list-electors-by-dwelling request)))
 (GET
  "/json/auto/list-electors-by-gender"
  request
  (route/restricted (list-electors-by-gender request)))
 (GET
  "/json/auto/list-followupactions"
  request
  (route/restricted (list-followupactions request)))
 (GET
  "/json/auto/list-followupactions-by-canvasser"
  request
  (route/restricted (list-followupactions-by-canvasser request)))
 (GET
  "/json/auto/list-followupactions-by-followuprequest"
  request
  (route/restricted (list-followupactions-by-followuprequest request)))
 (GET
  "/json/auto/list-followupmethods"
  request
  (route/restricted (list-followupmethods request)))
 (GET
  "/json/auto/list-followuprequests"
  request
  (route/restricted (list-followuprequests request)))
 (GET
  "/json/auto/list-followuprequests-by-elector"
  request
  (route/restricted (list-followuprequests-by-elector request)))
 (GET
  "/json/auto/list-followuprequests-by-followupmethod"
  request
  (route/restricted (list-followuprequests-by-followupmethod request)))
 (GET
  "/json/auto/list-followuprequests-by-issue"
  request
  (route/restricted (list-followuprequests-by-issue request)))
 (GET
  "/json/auto/list-followuprequests-by-visit"
  request
  (route/restricted (list-followuprequests-by-visit request)))
 (GET
  "/json/auto/list-genders"
  request
  (route/restricted (list-genders request)))
 (GET
  "/json/auto/list-intentions"
  request
  (route/restricted (list-intentions request)))
 (GET
  "/json/auto/list-intentions-by-elector"
  request
  (route/restricted (list-intentions-by-elector request)))
 (GET
  "/json/auto/list-intentions-by-option"
  request
  (route/restricted (list-intentions-by-option request)))
 (GET
  "/json/auto/list-intentions-by-visit"
  request
  (route/restricted (list-intentions-by-visit request)))
 (GET
  "/json/auto/list-issues"
  request
  (route/restricted (list-issues request)))
 (GET
  "/json/auto/list-options"
  request
  (route/restricted (list-options request)))
 (GET
  "/json/auto/list-roles"
  request
  (route/restricted (list-roles request)))
 (GET
  "/json/auto/list-roles-by-canvasser"
  request
  (route/restricted (list-roles-by-canvasser request)))
 (GET
  "/json/auto/list-teams"
  request
  (route/restricted (list-teams request)))
 (GET
  "/json/auto/list-teams-by-canvasser"
  request
  (route/restricted (list-teams-by-canvasser request)))
 (GET
  "/json/auto/list-teams-by-district"
  request
  (route/restricted (list-teams-by-district request)))
 (GET
  "/json/auto/list-visits"
  request
  (route/restricted (list-visits request)))
 (GET
  "/json/auto/list-visits-by-address"
  request
  (route/restricted (list-visits-by-address request)))
 (GET
  "/json/auto/list-visits-by-canvasser"
  request
  (route/restricted (list-visits-by-canvasser request)))
 (GET
  "/json/auto/search-strings-address"
  request
  (route/restricted (search-strings-address request)))
 (GET
  "/json/auto/search-strings-authority"
  request
  (route/restricted (search-strings-authority request)))
 (GET
  "/json/auto/search-strings-canvasser"
  request
  (route/restricted (search-strings-canvasser request)))
 (GET
  "/json/auto/search-strings-district"
  request
  (route/restricted (search-strings-district request)))
 (GET
  "/json/auto/search-strings-dwelling"
  request
  (route/restricted (search-strings-dwelling request)))
 (GET
  "/json/auto/search-strings-elector"
  request
  (route/restricted (search-strings-elector request)))
 (GET
  "/json/auto/search-strings-followupaction"
  request
  (route/restricted (search-strings-followupaction request)))
 (GET
  "/json/auto/search-strings-followupmethod"
  request
  (route/restricted (search-strings-followupmethod request)))
 (GET
  "/json/auto/search-strings-followuprequest"
  request
  (route/restricted (search-strings-followuprequest request)))
 (GET
  "/json/auto/search-strings-gender"
  request
  (route/restricted (search-strings-gender request)))
 (GET
  "/json/auto/search-strings-intention"
  request
  (route/restricted (search-strings-intention request)))
 (GET
  "/json/auto/search-strings-issue"
  request
  (route/restricted (search-strings-issue request)))
 (GET
  "/json/auto/search-strings-option"
  request
  (route/restricted (search-strings-option request)))
 (GET
  "/json/auto/search-strings-role"
  request
  (route/restricted (search-strings-role request)))
 (GET
  "/json/auto/search-strings-team"
  request
  (route/restricted (search-strings-team request)))
 (GET
  "/json/auto/search-strings-visit"
  request
  (route/restricted (search-strings-visit request)))
 (POST
  "/json/auto/update-address"
  request
  (route/restricted (update-address! request)))
 (POST
  "/json/auto/update-authority"
  request
  (route/restricted (update-authority! request)))
 (POST
  "/json/auto/update-canvasser"
  request
  (route/restricted (update-canvasser! request)))
 (POST
  "/json/auto/update-district"
  request
  (route/restricted (update-district! request)))
 (POST
  "/json/auto/update-dwelling"
  request
  (route/restricted (update-dwelling! request)))
 (POST
  "/json/auto/update-elector"
  request
  (route/restricted (update-elector! request)))
 (POST
  "/json/auto/update-followupaction"
  request
  (route/restricted (update-followupaction! request)))
 (POST
  "/json/auto/update-followuprequest"
  request
  (route/restricted (update-followuprequest! request)))
 (POST
  "/json/auto/update-intention"
  request
  (route/restricted (update-intention! request)))
 (POST
  "/json/auto/update-issue"
  request
  (route/restricted (update-issue! request)))
 (POST
  "/json/auto/update-role"
  request
  (route/restricted (update-role! request)))
 (POST
  "/json/auto/update-team"
  request
  (route/restricted (update-team! request)))
 (POST
  "/json/auto/update-visit"
  request
  (route/restricted (update-visit! request))))
