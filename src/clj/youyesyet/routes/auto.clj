(ns
 youyesyet.routes.auto
 "User interface routes for Youyesyet auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at 20180709T205534.030Z"
 (:require
  [adl-support.core :as support]
  [clojure.java.io :as io]
  [clojure.set :refer [subset?]]
  [clojure.tools.logging :as log]
  [compojure.core :refer [defroutes GET POST]]
  [hugsql.core :as hugsql]
  [noir.response :as nresponse]
  [noir.util.route :as route]
  [ring.util.http-response :as response]
  [youyesyet.layout :as l]
  [youyesyet.db.core :as db]
  [youyesyet.routes.manual :as m]))

(defn
 index
 [r]
 (l/render
  (support/resolve-template "application-index.html")
  (:session r)
  {:title "Administrative menu"}))

(defn
 list-addresses-Addresses
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-addresses-Addresses.html")
   (:session r)
   (merge
    {:title "Addresses", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-addresses db/*db* p)
      (db/list-addresses db/*db* {}))}))))

(defn
 form-addresses-Address
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-addresses-Address.html")
   (:session r)
   (merge
    {:title "Address", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-address! db/*db* p)
          {:message "Updated record"})
         (do (db/create-address! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-address db/*db* p))})
     (list {:districts (db/list-districts db/*db*)}))))))

(defn
 list-authorities-Authorities
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-authorities-Authorities.html")
   (:session r)
   (merge
    {:title "Authorities", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-authorities db/*db* p)
      (db/list-authorities db/*db* {}))}))))

(defn
 form-authorities-Authority
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-authorities-Authority.html")
   (:session r)
   (merge
    {:title "Authority", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-authority! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-authority! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-authority db/*db* p))})
     (list))))))

(defn
 list-canvassers-Canvassers
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-canvassers-Canvassers.html")
   (:session r)
   (merge
    {:title "Canvassers", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-canvassers db/*db* p)
      (db/list-canvassers db/*db* {}))}))))

(defn
 form-canvassers-Canvasser
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-canvassers-Canvasser.html")
   (:session r)
   (merge
    {:title "Canvasser", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-canvasser! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-canvasser! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-canvasser db/*db* p))})
     (list
      {:electors (db/list-electors db/*db*)}
      {:addresses (db/list-addresses db/*db*)}
      {:authorities (db/list-authorities db/*db*)}
      {:roles (db/list-roles db/*db*)}
      {:issues (db/list-issues db/*db*)}))))))

(defn
 list-districts-Districts
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-districts-Districts.html")
   (:session r)
   (merge
    {:title "Districts", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-districts db/*db* p)
      (db/list-districts db/*db* {}))}))))

(defn
 form-districts-District
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-districts-District.html")
   (:session r)
   (merge
    {:title "District", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-district! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-district! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-district db/*db* p))})
     (list))))))

(defn
 list-dwellings-Dwellings
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-dwellings-Dwellings.html")
   (:session r)
   (merge
    {:title "Dwellings", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-dwellings db/*db* p)
      (db/list-dwellings db/*db* {}))}))))

(defn
 form-dwellings-Dwelling
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-dwellings-Dwelling.html")
   (:session r)
   (merge
    {:title "Dwelling", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-dwelling! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-dwelling! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-dwelling db/*db* p))})
     (list {:addresses (db/list-addresses db/*db*)}))))))

(defn
 list-electors-Electors
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-electors-Electors.html")
   (:session r)
   (merge
    {:title "Electors", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-electors db/*db* p)
      (db/list-electors db/*db* {}))}))))

(defn
 form-electors-Elector
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-electors-Elector.html")
   (:session r)
   (merge
    {:title "Elector", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-elector! db/*db* p)
          {:message "Updated record"})
         (do (db/create-elector! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-elector db/*db* p))})
     (list
      {:dwellings (db/list-dwellings db/*db*)}
      {:genders (db/list-genders db/*db*)}))))))

(defn
 form-events-Events
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-events-Events.html")
   (:session r)
   (merge
    {:title "Events", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-event! db/*db* p) {:message "Updated record"})
         (do (db/create-event! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-event db/*db* p))})
     (list {:teams (db/list-teams db/*db*)}))))))

(defn
 list-events-Events
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-events-Events.html")
   (:session r)
   (merge
    {:title "Events", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-events db/*db* p)
      (db/list-events db/*db* {}))}))))

(defn
 list-followupactions-Followupactions
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "list-followupactions-Followupactions.html")
   (:session r)
   (merge
    {:title "Followupactions", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-followupactions db/*db* p)
      (db/list-followupactions db/*db* {}))}))))

(defn
 form-followupactions-Followupaction
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "form-followupactions-Followupaction.html")
   (:session r)
   (merge
    {:title "Followupaction", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-followupaction! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-followupaction! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-followupaction db/*db* p))})
     (list
      {:followuprequests (db/list-followuprequests db/*db*)}
      {:canvassers (db/list-canvassers db/*db*)}))))))

(defn
 list-followupmethods-Followupmethods
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "list-followupmethods-Followupmethods.html")
   (:session r)
   (merge
    {:title "Followupmethods", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-followupmethods db/*db* p)
      (db/list-followupmethods db/*db* {}))}))))

(defn
 form-followupmethods-Followupmethod
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "form-followupmethods-Followupmethod.html")
   (:session r)
   (merge
    {:title "Followupmethod", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-followupmethod! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-followupmethod! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-followupmethod db/*db* p))})
     (list))))))

(defn
 list-followuprequests-Followuprequests
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "list-followuprequests-Followuprequests.html")
   (:session r)
   (merge
    {:title "Followuprequests", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-followuprequests db/*db* p)
      (db/list-followuprequests db/*db* {}))}))))

(defn
 form-followuprequests-Followuprequest
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template
    "form-followuprequests-Followuprequest.html")
   (:session r)
   (merge
    {:title "Followuprequest", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-followuprequest! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-followuprequest! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-followuprequest db/*db* p))})
     (list
      {:electors (db/list-electors db/*db*)}
      {:visits (db/list-visits db/*db*)}
      {:issues (db/list-issues db/*db*)}
      {:followupmethods (db/list-followupmethods db/*db*)}))))))

(defn
 list-genders-Genders
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-genders-Genders.html")
   (:session r)
   (merge
    {:title "Genders", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-genders db/*db* p)
      (db/list-genders db/*db* {}))}))))

(defn
 form-genders-Gender
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-genders-Gender.html")
   (:session r)
   (merge
    {:title "Gender", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-gender! db/*db* p) {:message "Updated record"})
         (do (db/create-gender! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-gender db/*db* p))})
     (list))))))

(defn
 list-intentions-Intentions
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-intentions-Intentions.html")
   (:session r)
   (merge
    {:title "Intentions", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-intentions db/*db* p)
      (db/list-intentions db/*db* {}))}))))

(defn
 form-intentions-Intention
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-intentions-Intention.html")
   (:session r)
   (merge
    {:title "Intention", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do
          (db/update-intention! db/*db* p)
          {:message "Updated record"})
         (do
          (db/create-intention! db/*db* p)
          {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-intention db/*db* p))})
     (list
      {:visits (db/list-visits db/*db*)}
      {:electors (db/list-electors db/*db*)}
      {:options (db/list-options db/*db*)}))))))

(defn
 list-issues-Issues
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-issues-Issues.html")
   (:session r)
   (merge
    {:title "Issues", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-issues db/*db* p)
      (db/list-issues db/*db* {}))}))))

(defn
 form-issues-Issue
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-issues-Issue.html")
   (:session r)
   (merge
    {:title "Issue", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-issue! db/*db* p) {:message "Updated record"})
         (do (db/create-issue! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-issue db/*db* p))})
     (list {:canvassers (db/list-canvassers db/*db*)}))))))

(defn
 list-options-Options
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-options-Options.html")
   (:session r)
   (merge
    {:title "Options", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-options db/*db* p)
      (db/list-options db/*db* {}))}))))

(defn
 form-options-Option
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-options-Option.html")
   (:session r)
   (merge
    {:title "Option", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-option! db/*db* p) {:message "Updated record"})
         (do (db/create-option! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-option db/*db* p))})
     (list))))))

(defn
 list-roles-Roles
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-roles-Roles.html")
   (:session r)
   (merge
    {:title "Roles", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-roles db/*db* p)
      (db/list-roles db/*db* {}))}))))

(defn
 form-roles-Role
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-roles-Role.html")
   (:session r)
   (merge
    {:title "Role", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-role! db/*db* p) {:message "Updated record"})
         (do (db/create-role! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-role db/*db* p))})
     (list {:canvassers (db/list-canvassers db/*db*)}))))))

(defn
 list-teams-Teams
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-teams-Teams.html")
   (:session r)
   (merge
    {:title "Teams", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-teams db/*db* p)
      (db/list-teams db/*db* {}))}))))

(defn
 form-teams-Team
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-teams-Team.html")
   (:session r)
   (merge
    {:title "Team", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-team! db/*db* p) {:message "Updated record"})
         (do (db/create-team! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-team db/*db* p))})
     (list
      {:districts (db/list-districts db/*db*)}
      {:canvassers (db/list-canvassers db/*db*)}
      {:canvassers (db/list-canvassers db/*db*)}))))))

(defn
 list-visits-Visits
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "list-visits-Visits.html")
   (:session r)
   (merge
    {:title "Visits", :params p}
    {:records
     (if
      (not (empty? (remove nil? (vals p))))
      (db/search-strings-visits db/*db* p)
      (db/list-visits db/*db* {}))}))))

(defn
 form-visits-Visit
 [r]
 (let
  [p (support/massage-params (:params r) (:form-params r) #{"id"})]
  (l/render
   (support/resolve-template "form-visits-Visit.html")
   (:session r)
   (merge
    {:title "Visit", :params p}
    (reduce
     merge
     (merge
      (cond
       (:save-button p)
       (try
        (if
         (some #{"id"} (map name (keys p)))
         (do (db/update-visit! db/*db* p) {:message "Updated record"})
         (do (db/create-visit! db/*db* p) {:message "Saved record"}))
        (catch
         java.lang.Exception
         any__2085__auto__
         {:error (.getMessage any__2085__auto__)})))
      {:record
       (if
        (empty? (remove nil? (vals p)))
        []
        (db/get-visit db/*db* p))})
     (list
      {:addresses (db/list-addresses db/*db*)}
      {:canvassers (db/list-canvassers db/*db*)}))))))

(defn
 raw-resolve-handler
 "Prefer the manually-written version of the handler with name `n`, if it exists, to the automatically generated one"
 [n]
 (try
  (eval (symbol (str "youyesyet" ".routes.manual/" n)))
  (catch
   Exception
   _
   (eval (symbol (str "youyesyet" ".routes.auto/" n))))))

(def resolve-handler (memoize raw-resolve-handler))

(defroutes
 auto-selmer-routes
 (GET
  "/admin"
  request
  (route/restricted (apply (resolve-handler "index") (list request))))
 (GET
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (POST
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (GET
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (POST
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (GET
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (POST
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (GET
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (POST
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (GET
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (POST
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (GET
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (POST
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (GET
  "/form-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "form-events-Events") (list request))))
 (POST
  "/form-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "form-events-Events") (list request))))
 (GET
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (POST
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (GET
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (POST
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (GET
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (POST
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (GET
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (POST
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (GET
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (POST
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (GET
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (POST
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (GET
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (POST
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (GET
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (POST
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (GET
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (POST
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (GET
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (POST
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (GET
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (POST
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (GET
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (POST
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (GET
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (POST
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (GET
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (POST
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (GET
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (POST
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (GET
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (POST
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (GET
  "/list-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "list-events-Events") (list request))))
 (POST
  "/list-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "list-events-Events") (list request))))
 (GET
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (POST
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (GET
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (POST
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (GET
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (POST
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (GET
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (POST
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (GET
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (POST
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (GET
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (POST
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (GET
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (POST
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (GET
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (POST
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (GET
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (POST
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (GET
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request))))
 (POST
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request)))))

