(ns
 youyesyet.routes.auto
 "User interface routes for Youyesyet auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at 20180715T195946.069Z"
 (:require
  [adl-support.core :as support]
  [clojure.java.io :as io]
  [clojure.set :refer [subset?]]
  [clojure.tools.logging :as log]
  [clojure.walk :refer [keywordize-keys]]
  [compojure.core :refer [defroutes GET POST]]
  [hugsql.core :as hugsql]
  [noir.response :as nresponse]
  [noir.util.route :as route]
  [ring.util.http-response :as response]
  [youyesyet.layout :as l]
  [youyesyet.db.core :as db]
  [youyesyet.routes.manual :as m]))

(defn
 index
 [r]
 (l/render
  (support/resolve-template "application-index.html")
  (:session r)
  {:title "Administrative menu"}))

(defn
 list-addresses-Addresses
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-addresses-Addresses.html")
   (:session request)
   (merge
    {:title "Addresses", :params params}
    (let
     [records
      (if
       (some
        #{:locality :address :phone :postcode :longitude :district_id
          :id :latitude}
        (keys params))
       (do
        (log/debug (db/search-strings-addresses-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-addresses db/*db* params)
         :message
         "Error while searching address records"
         :error-return
         {:warnings ["Error while searching address records"]}))
       (do
        (log/debug (db/list-addresses-sqlvec params))
        (support/do-or-log-error
         (db/list-addresses db/*db* {})
         :message
         "Error while fetching address records"
         :error-return
         {:warnings ["Error while fetching address records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-addresses-Address
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-addresses-Address.html")
   (:session request)
   (merge
    {:title "Address", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-address db/*db* params)
       :message
       (str "Error while fetching address record " params)
       :error-return
       {:warnings
        [(str "Error while fetching address record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :district_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-district db/*db* {:id (:district_id record)})
          :message
          "Error while fetching district record {:id (:district_id record)}")
         (support/do-or-log-error
          (db/list-districts db/*db*)
          :message
          "Error while fetching district list"))))})))))

(defn
 list-authorities-Authorities
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-authorities-Authorities.html")
   (:session request)
   (merge
    {:title "Authorities", :params params}
    (let
     [records
      (if
       (some
        #{:access-token-uri :request-token-uri :authorize-uri :id
          :consumer-secret :consumer-key}
        (keys params))
       (do
        (log/debug (db/search-strings-authorities-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-authorities db/*db* params)
         :message
         "Error while searching authority records"
         :error-return
         {:warnings ["Error while searching authority records"]}))
       (do
        (log/debug (db/list-authorities-sqlvec params))
        (support/do-or-log-error
         (db/list-authorities db/*db* {})
         :message
         "Error while fetching authority records"
         :error-return
         {:warnings ["Error while fetching authority records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-authorities-Authority
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-authorities-Authority.html")
   (:session request)
   (merge
    {:title "Authority", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-authority db/*db* params)
       :message
       (str "Error while fetching authority record " params)
       :error-return
       {:warnings
        [(str "Error while fetching authority record " params)]})]
     {:error (:warnings record), :record (dissoc record :warnings)})))))

(defn
 list-canvassers-Canvassers
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-canvassers-Canvassers.html")
   (:session request)
   (merge
    {:title "Canvassers", :params params}
    (let
     [records
      (if
       (some
        #{:email :phone :roles :username :fullname :bio :elector_id
          :expertise :id :avatar :address_id :authority_id :authorised}
        (keys params))
       (do
        (log/debug (db/search-strings-canvassers-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-canvassers db/*db* params)
         :message
         "Error while searching canvasser records"
         :error-return
         {:warnings ["Error while searching canvasser records"]}))
       (do
        (log/debug (db/list-canvassers-sqlvec params))
        (support/do-or-log-error
         (db/list-canvassers db/*db* {})
         :message
         "Error while fetching canvasser records"
         :error-return
         {:warnings ["Error while fetching canvasser records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-canvassers-Canvasser
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-canvassers-Canvasser.html")
   (:session request)
   (merge
    {:title "Canvasser", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-canvasser db/*db* params)
       :message
       (str "Error while fetching canvasser record " params)
       :error-return
       {:warnings
        [(str "Error while fetching canvasser record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :elector_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-elector db/*db* {:id (:elector_id record)})
          :message
          "Error while fetching elector record {:id (:elector_id record)}")
         (support/do-or-log-error
          (db/list-electors db/*db*)
          :message
          "Error while fetching elector list")))),
      :address_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-address db/*db* {:id (:address_id record)})
          :message
          "Error while fetching address record {:id (:address_id record)}")
         (support/do-or-log-error
          (db/list-addresses db/*db*)
          :message
          "Error while fetching address list")))),
      :authority_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-authority db/*db* {:id (:authority_id record)})
          :message
          "Error while fetching authority record {:id (:authority_id record)}")
         (support/do-or-log-error
          (db/list-authorities db/*db*)
          :message
          "Error while fetching authority list")))),
      :roles
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-roles db/*db*)
          :message
          "Error while fetching role list")))),
      :expertise
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-issues db/*db*)
          :message
          "Error while fetching issue list"))))})))))

(defn
 list-districts-Districts
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-districts-Districts.html")
   (:session request)
   (merge
    {:title "Districts", :params params}
    (let
     [records
      (if
       (some #{:name :id} (keys params))
       (do
        (log/debug (db/search-strings-districts-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-districts db/*db* params)
         :message
         "Error while searching district records"
         :error-return
         {:warnings ["Error while searching district records"]}))
       (do
        (log/debug (db/list-districts-sqlvec params))
        (support/do-or-log-error
         (db/list-districts db/*db* {})
         :message
         "Error while fetching district records"
         :error-return
         {:warnings ["Error while fetching district records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-districts-District
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-districts-District.html")
   (:session request)
   (merge
    {:title "District", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-district db/*db* params)
       :message
       (str "Error while fetching district record " params)
       :error-return
       {:warnings
        [(str "Error while fetching district record " params)]})]
     {:error (:warnings record), :record (dissoc record :warnings)})))))

(defn
 list-dwellings-Dwellings
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-dwellings-Dwellings.html")
   (:session request)
   (merge
    {:title "Dwellings", :params params}
    (let
     [records
      (if
       (some #{:id :address_id :sub-address} (keys params))
       (do
        (log/debug (db/search-strings-dwellings-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-dwellings db/*db* params)
         :message
         "Error while searching dwelling records"
         :error-return
         {:warnings ["Error while searching dwelling records"]}))
       (do
        (log/debug (db/list-dwellings-sqlvec params))
        (support/do-or-log-error
         (db/list-dwellings db/*db* {})
         :message
         "Error while fetching dwelling records"
         :error-return
         {:warnings ["Error while fetching dwelling records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-dwellings-Dwelling
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-dwellings-Dwelling.html")
   (:session request)
   (merge
    {:title "Dwelling", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-dwelling db/*db* params)
       :message
       (str "Error while fetching dwelling record " params)
       :error-return
       {:warnings
        [(str "Error while fetching dwelling record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :address_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-address db/*db* {:id (:address_id record)})
          :message
          "Error while fetching address record {:id (:address_id record)}")
         (support/do-or-log-error
          (db/list-addresses db/*db*)
          :message
          "Error while fetching address list"))))})))))

(defn
 list-electors-Electors
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-electors-Electors.html")
   (:session request)
   (merge
    {:title "Electors", :params params}
    (let
     [records
      (if
       (some
        #{:email :phone :name :dwelling_id :id :gender}
        (keys params))
       (do
        (log/debug (db/search-strings-electors-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-electors db/*db* params)
         :message
         "Error while searching elector records"
         :error-return
         {:warnings ["Error while searching elector records"]}))
       (do
        (log/debug (db/list-electors-sqlvec params))
        (support/do-or-log-error
         (db/list-electors db/*db* {})
         :message
         "Error while fetching elector records"
         :error-return
         {:warnings ["Error while fetching elector records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-electors-Elector
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-electors-Elector.html")
   (:session request)
   (merge
    {:title "Elector", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-elector db/*db* params)
       :message
       (str "Error while fetching elector record " params)
       :error-return
       {:warnings
        [(str "Error while fetching elector record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :dwelling_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-dwelling db/*db* {:id (:dwelling_id record)})
          :message
          "Error while fetching dwelling record {:id (:dwelling_id record)}")
         (support/do-or-log-error
          (db/list-dwellings db/*db*)
          :message
          "Error while fetching dwelling list")))),
      :gender
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-gender db/*db* {:id (:gender record)})
          :message
          "Error while fetching gender record {:id (:gender record)}")
         (support/do-or-log-error
          (db/list-genders db/*db*)
          :message
          "Error while fetching gender list"))))})))))

(defn
 form-events-Events
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-events-Events.html")
   (:session request)
   (merge
    {:title "Events", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-event db/*db* params)
       :message
       (str "Error while fetching event record " params)
       :error-return
       {:warnings
        [(str "Error while fetching event record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :teams
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-teams db/*db*)
          :message
          "Error while fetching team list"))))})))))

(defn
 list-events-Events
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-events-Events.html")
   (:session request)
   (merge
    {:title "Events", :params params}
    (let
     [records
      (if
       (some
        #{:date :name :time :teams :cancelled :decription :id}
        (keys params))
       (do
        (log/debug (db/search-strings-events-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-events db/*db* params)
         :message
         "Error while searching event records"
         :error-return
         {:warnings ["Error while searching event records"]}))
       (do
        (log/debug (db/list-events-sqlvec params))
        (support/do-or-log-error
         (db/list-events db/*db* {})
         :message
         "Error while fetching event records"
         :error-return
         {:warnings ["Error while fetching event records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 list-followupactions-Followupactions
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "list-followupactions-Followupactions.html")
   (:session request)
   (merge
    {:title "Followupactions", :params params}
    (let
     [records
      (if
       (some
        #{:closed :date :id :notes :request_id :actor}
        (keys params))
       (do
        (log/debug (db/search-strings-followupactions-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-followupactions db/*db* params)
         :message
         "Error while searching followupaction records"
         :error-return
         {:warnings ["Error while searching followupaction records"]}))
       (do
        (log/debug (db/list-followupactions-sqlvec params))
        (support/do-or-log-error
         (db/list-followupactions db/*db* {})
         :message
         "Error while fetching followupaction records"
         :error-return
         {:warnings
          ["Error while fetching followupaction records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-followupactions-Followupaction
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "form-followupactions-Followupaction.html")
   (:session request)
   (merge
    {:title "Followupaction", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-followupaction db/*db* params)
       :message
       (str "Error while fetching followupaction record " params)
       :error-return
       {:warnings
        [(str "Error while fetching followupaction record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :request_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-followuprequest db/*db* {:id (:request_id record)})
          :message
          "Error while fetching followuprequest record {:id (:request_id record)}")
         (support/do-or-log-error
          (db/list-followuprequests db/*db*)
          :message
          "Error while fetching followuprequest list")))),
      :actor
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-canvasser db/*db* {:id (:actor record)})
          :message
          "Error while fetching canvasser record {:id (:actor record)}")
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list"))))})))))

(defn
 list-followupmethods-Followupmethods
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "list-followupmethods-Followupmethods.html")
   (:session request)
   (merge
    {:title "Followupmethods", :params params}
    (let
     [records
      (if
       (some #{:id} (keys params))
       (do
        (log/debug (db/search-strings-followupmethods-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-followupmethods db/*db* params)
         :message
         "Error while searching followupmethod records"
         :error-return
         {:warnings ["Error while searching followupmethod records"]}))
       (do
        (log/debug (db/list-followupmethods-sqlvec params))
        (support/do-or-log-error
         (db/list-followupmethods db/*db* {})
         :message
         "Error while fetching followupmethod records"
         :error-return
         {:warnings
          ["Error while fetching followupmethod records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-followupmethods-Followupmethod
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "form-followupmethods-Followupmethod.html")
   (:session request)
   (merge
    {:title "Followupmethod", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-followupmethod db/*db* params)
       :message
       (str "Error while fetching followupmethod record " params)
       :error-return
       {:warnings
        [(str "Error while fetching followupmethod record " params)]})]
     {:error (:warnings record), :record (dissoc record :warnings)})))))

(defn
 list-followuprequests-Followuprequests
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "list-followuprequests-Followuprequests.html")
   (:session request)
   (merge
    {:title "Followuprequests", :params params}
    (let
     [records
      (if
       (some
        #{:issue_id :visit_id :elector_id :id :method_id}
        (keys params))
       (do
        (log/debug (db/search-strings-followuprequests-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-followuprequests db/*db* params)
         :message
         "Error while searching followuprequest records"
         :error-return
         {:warnings
          ["Error while searching followuprequest records"]}))
       (do
        (log/debug (db/list-followuprequests-sqlvec params))
        (support/do-or-log-error
         (db/list-followuprequests db/*db* {})
         :message
         "Error while fetching followuprequest records"
         :error-return
         {:warnings
          ["Error while fetching followuprequest records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-followuprequests-Followuprequest
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template
    "form-followuprequests-Followuprequest.html")
   (:session request)
   (merge
    {:title "Followuprequest", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-followuprequest db/*db* params)
       :message
       (str "Error while fetching followuprequest record " params)
       :error-return
       {:warnings
        [(str
          "Error while fetching followuprequest record "
          params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :elector_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-elector db/*db* {:id (:elector_id record)})
          :message
          "Error while fetching elector record {:id (:elector_id record)}")
         (support/do-or-log-error
          (db/list-electors db/*db*)
          :message
          "Error while fetching elector list")))),
      :visit_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-visit db/*db* {:id (:visit_id record)})
          :message
          "Error while fetching visit record {:id (:visit_id record)}")
         (support/do-or-log-error
          (db/list-visits db/*db*)
          :message
          "Error while fetching visit list")))),
      :issue_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-issue db/*db* {:id (:issue_id record)})
          :message
          "Error while fetching issue record {:id (:issue_id record)}")
         (support/do-or-log-error
          (db/list-issues db/*db*)
          :message
          "Error while fetching issue list")))),
      :method_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-followupmethod db/*db* {:id (:method_id record)})
          :message
          "Error while fetching followupmethod record {:id (:method_id record)}")
         (support/do-or-log-error
          (db/list-followupmethods db/*db*)
          :message
          "Error while fetching followupmethod list"))))})))))

(defn
 list-genders-Genders
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-genders-Genders.html")
   (:session request)
   (merge
    {:title "Genders", :params params}
    (let
     [records
      (if
       (some #{:id} (keys params))
       (do
        (log/debug (db/search-strings-genders-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-genders db/*db* params)
         :message
         "Error while searching gender records"
         :error-return
         {:warnings ["Error while searching gender records"]}))
       (do
        (log/debug (db/list-genders-sqlvec params))
        (support/do-or-log-error
         (db/list-genders db/*db* {})
         :message
         "Error while fetching gender records"
         :error-return
         {:warnings ["Error while fetching gender records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-genders-Gender
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-genders-Gender.html")
   (:session request)
   (merge
    {:title "Gender", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-gender db/*db* params)
       :message
       (str "Error while fetching gender record " params)
       :error-return
       {:warnings
        [(str "Error while fetching gender record " params)]})]
     {:error (:warnings record), :record (dissoc record :warnings)})))))

(defn
 list-intentions-Intentions
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-intentions-Intentions.html")
   (:session request)
   (merge
    {:title "Intentions", :params params}
    (let
     [records
      (if
       (some
        #{:locality :option_id :visit_id :elector_id :id}
        (keys params))
       (do
        (log/debug (db/search-strings-intentions-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-intentions db/*db* params)
         :message
         "Error while searching intention records"
         :error-return
         {:warnings ["Error while searching intention records"]}))
       (do
        (log/debug (db/list-intentions-sqlvec params))
        (support/do-or-log-error
         (db/list-intentions db/*db* {})
         :message
         "Error while fetching intention records"
         :error-return
         {:warnings ["Error while fetching intention records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-intentions-Intention
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-intentions-Intention.html")
   (:session request)
   (merge
    {:title "Intention", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-intention db/*db* params)
       :message
       (str "Error while fetching intention record " params)
       :error-return
       {:warnings
        [(str "Error while fetching intention record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :visit_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-visit db/*db* {:id (:visit_id record)})
          :message
          "Error while fetching visit record {:id (:visit_id record)}")
         (support/do-or-log-error
          (db/list-visits db/*db*)
          :message
          "Error while fetching visit list")))),
      :elector_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-elector db/*db* {:id (:elector_id record)})
          :message
          "Error while fetching elector record {:id (:elector_id record)}")
         (support/do-or-log-error
          (db/list-electors db/*db*)
          :message
          "Error while fetching elector list")))),
      :option_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-option db/*db* {:id (:option_id record)})
          :message
          "Error while fetching option record {:id (:option_id record)}")
         (support/do-or-log-error
          (db/list-options db/*db*)
          :message
          "Error while fetching option list"))))})))))

(defn
 list-issues-Issues
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-issues-Issues.html")
   (:session request)
   (merge
    {:title "Issues", :params params}
    (let
     [records
      (if
       (some #{:experts :brief :id :current :url} (keys params))
       (do
        (log/debug (db/search-strings-issues-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-issues db/*db* params)
         :message
         "Error while searching issue records"
         :error-return
         {:warnings ["Error while searching issue records"]}))
       (do
        (log/debug (db/list-issues-sqlvec params))
        (support/do-or-log-error
         (db/list-issues db/*db* {})
         :message
         "Error while fetching issue records"
         :error-return
         {:warnings ["Error while fetching issue records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-issues-Issue
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-issues-Issue.html")
   (:session request)
   (merge
    {:title "Issue", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-issue db/*db* params)
       :message
       (str "Error while fetching issue record " params)
       :error-return
       {:warnings
        [(str "Error while fetching issue record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :experts
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list"))))})))))

(defn
 list-options-Options
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-options-Options.html")
   (:session request)
   (merge
    {:title "Options", :params params}
    (let
     [records
      (if
       (some #{:id} (keys params))
       (do
        (log/debug (db/search-strings-options-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-options db/*db* params)
         :message
         "Error while searching option records"
         :error-return
         {:warnings ["Error while searching option records"]}))
       (do
        (log/debug (db/list-options-sqlvec params))
        (support/do-or-log-error
         (db/list-options db/*db* {})
         :message
         "Error while fetching option records"
         :error-return
         {:warnings ["Error while fetching option records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-options-Option
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-options-Option.html")
   (:session request)
   (merge
    {:title "Option", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-option db/*db* params)
       :message
       (str "Error while fetching option record " params)
       :error-return
       {:warnings
        [(str "Error while fetching option record " params)]})]
     {:error (:warnings record), :record (dissoc record :warnings)})))))

(defn
 list-roles-Roles
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-roles-Roles.html")
   (:session request)
   (merge
    {:title "Roles", :params params}
    (let
     [records
      (if
       (some #{:name :id :members} (keys params))
       (do
        (log/debug (db/search-strings-roles-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-roles db/*db* params)
         :message
         "Error while searching role records"
         :error-return
         {:warnings ["Error while searching role records"]}))
       (do
        (log/debug (db/list-roles-sqlvec params))
        (support/do-or-log-error
         (db/list-roles db/*db* {})
         :message
         "Error while fetching role records"
         :error-return
         {:warnings ["Error while fetching role records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-roles-Role
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-roles-Role.html")
   (:session request)
   (merge
    {:title "Role", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-role db/*db* params)
       :message
       (str "Error while fetching role record " params)
       :error-return
       {:warnings [(str "Error while fetching role record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :members
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list"))))})))))

(defn
 list-teams-Teams
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-teams-Teams.html")
   (:session request)
   (merge
    {:title "Teams", :params params}
    (let
     [records
      (if
       (some
        #{:name :organisers :longitude :district_id :id :latitude
          :members}
        (keys params))
       (do
        (log/debug (db/search-strings-teams-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-teams db/*db* params)
         :message
         "Error while searching team records"
         :error-return
         {:warnings ["Error while searching team records"]}))
       (do
        (log/debug (db/list-teams-sqlvec params))
        (support/do-or-log-error
         (db/list-teams db/*db* {})
         :message
         "Error while fetching team records"
         :error-return
         {:warnings ["Error while fetching team records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-teams-Team
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-teams-Team.html")
   (:session request)
   (merge
    {:title "Team", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-team db/*db* params)
       :message
       (str "Error while fetching team record " params)
       :error-return
       {:warnings [(str "Error while fetching team record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :district_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-district db/*db* {:id (:district_id record)})
          :message
          "Error while fetching district record {:id (:district_id record)}")
         (support/do-or-log-error
          (db/list-districts db/*db*)
          :message
          "Error while fetching district list")))),
      :members
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list")))),
      :organisers
      (flatten
       (remove
        nil?
        (list
         nil
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list"))))})))))

(defn
 list-visits-Visits
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "list-visits-Visits.html")
   (:session request)
   (merge
    {:title "Visits", :params params}
    (let
     [records
      (if
       (some #{:canvasser_id :date :id :address_id} (keys params))
       (do
        (log/debug (db/search-strings-visits-sqlvec params))
        (support/do-or-log-error
         (db/search-strings-visits db/*db* params)
         :message
         "Error while searching visit records"
         :error-return
         {:warnings ["Error while searching visit records"]}))
       (do
        (log/debug (db/list-visits-sqlvec params))
        (support/do-or-log-error
         (db/list-visits db/*db* {})
         :message
         "Error while fetching visit records"
         :error-return
         {:warnings ["Error while fetching visit records"]})))]
     (if (:warnings records) records {:records records}))))))

(defn
 form-visits-Visit
 [request]
 (let
  [params
   (support/massage-params
    (keywordize-keys (:params request))
    (keywordize-keys (:form-params request))
    #{:id})]
  (l/render
   (support/resolve-template "form-visits-Visit.html")
   (:session request)
   (merge
    {:title "Visit", :params params}
    (let
     [record
      (support/do-or-log-error
       (db/get-visit db/*db* params)
       :message
       (str "Error while fetching visit record " params)
       :error-return
       {:warnings
        [(str "Error while fetching visit record " params)]})]
     {:error (:warnings record),
      :record (dissoc record :warnings),
      :address_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-address db/*db* {:id (:address_id record)})
          :message
          "Error while fetching address record {:id (:address_id record)}")
         (support/do-or-log-error
          (db/list-addresses db/*db*)
          :message
          "Error while fetching address list")))),
      :canvasser_id
      (flatten
       (remove
        nil?
        (list
         (support/do-or-log-error
          (db/get-canvasser db/*db* {:id (:canvasser_id record)})
          :message
          "Error while fetching canvasser record {:id (:canvasser_id record)}")
         (support/do-or-log-error
          (db/list-canvassers db/*db*)
          :message
          "Error while fetching canvasser list"))))})))))

(defn
 raw-resolve-handler
 "Prefer the manually-written version of the handler with name `n`, if it exists, to the automatically generated one"
 [n]
 (try
  (eval (symbol (str "youyesyet" ".routes.manual/" n)))
  (catch
   Exception
   _
   (eval (symbol (str "youyesyet" ".routes.auto/" n))))))

(def resolve-handler (memoize raw-resolve-handler))

(defroutes
 auto-selmer-routes
 (GET
  "/admin"
  request
  (route/restricted (apply (resolve-handler "index") (list request))))
 (GET
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (POST
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (GET
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (POST
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (GET
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (POST
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (GET
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (POST
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (GET
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (POST
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (GET
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (POST
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (GET
  "/form-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "form-events-Events") (list request))))
 (POST
  "/form-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "form-events-Events") (list request))))
 (GET
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (POST
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (GET
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (POST
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (GET
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (POST
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (GET
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (POST
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (GET
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (POST
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (GET
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (POST
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (GET
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (POST
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (GET
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (POST
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (GET
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (POST
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (GET
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (POST
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (GET
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (POST
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (GET
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (POST
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (GET
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (POST
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (GET
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (POST
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (GET
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (POST
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (GET
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (POST
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (GET
  "/list-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "list-events-Events") (list request))))
 (POST
  "/list-events-Events"
  request
  (route/restricted
   (apply (resolve-handler "list-events-Events") (list request))))
 (GET
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (POST
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (GET
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (POST
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (GET
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (POST
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (GET
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (POST
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (GET
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (POST
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (GET
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (POST
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (GET
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (POST
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (GET
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (POST
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (GET
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (POST
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (GET
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request))))
 (POST
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request)))))

