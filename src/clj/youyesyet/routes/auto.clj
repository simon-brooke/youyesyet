(ns
 youyesyet.routes.auto
 "User interface routes for Youyesyet auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at 20180701T221533.599Z"
 (:require
  [adl-support.core :as support]
  [clojure.java.io :as io]
  [clojure.set :refer [subset?]]
  [clojure.tools.logging :as log]
  [compojure.core :refer [defroutes GET POST]]
  [hugsql.core :as hugsql]
  [noir.response :as nresponse]
  [noir.util.route :as route]
  [ring.util.http-response :as response]
  [youyesyet.layout :as l]
  [youyesyet.db.core :as db]
  [youyesyet.routes.manual :as m]))

(defn
 index
 [r]
 (l/render
  (support/resolve-template "application-index.html")
  (:session r)
  {:title "Administrative menu"}))

(defn
 list-addresses-Addresses
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"district_id" "postcode" "longitude" "id" "latitude" "address"
         "locality" "phone"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-address db/*db* p)
       :message
       "Error while searching address records"
       :error-return
       {:warnings ["Error while searching address records"]})
      (support/do-or-log-error
       (db/list-addresses db/*db* {})
       :message
       "Error while fetching address records"
       :error-return
       {:warnings ["Error while fetching address records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-addresses-Addresses.html")
   (:session 'r)
   (merge {:title "Addresses", :params p} c))))

(defn
 form-addresses-Address
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-address db/*db* p))
      :message
      "Error while fetching address record"
      :error-return
      {:warnings ["Error while fetching address record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :districts
     (support/do-or-log-error
      (db/list-districts db/*db*)
      :message
      "Error while fetching district record")})]
  (l/render
   (support/resolve-template "form-addresses-Address.html")
   (:session 'r)
   (merge {:title "Address", :params p} c))))

(defn
 list-authorities-Authorities
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"authorize-uri" "request-token-uri" "access-token-uri"
         "consumer-key" "id" "consumer-secret"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-authority db/*db* p)
       :message
       "Error while searching authority records"
       :error-return
       {:warnings ["Error while searching authority records"]})
      (support/do-or-log-error
       (db/list-authorities db/*db* {})
       :message
       "Error while fetching authority records"
       :error-return
       {:warnings ["Error while fetching authority records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-authorities-Authorities.html")
   (:session 'r)
   (merge {:title "Authorities", :params p} c))))

(defn
 form-authorities-Authority
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-authority db/*db* p))
      :message
      "Error while fetching authority record"
      :error-return
      {:warnings ["Error while fetching authority record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template "form-authorities-Authority.html")
   (:session 'r)
   (merge {:title "Authority", :params p} c))))

(defn
 list-canvassers-Canvassers
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"username" "address_id" "elector_id" "id" "email"
         "authority_id" "authorised" "phone" "fullname" "roles"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-canvasser db/*db* p)
       :message
       "Error while searching canvasser records"
       :error-return
       {:warnings ["Error while searching canvasser records"]})
      (support/do-or-log-error
       (db/list-canvassers db/*db* {})
       :message
       "Error while fetching canvasser records"
       :error-return
       {:warnings ["Error while fetching canvasser records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-canvassers-Canvassers.html")
   (:session 'r)
   (merge {:title "Canvassers", :params p} c))))

(defn
 form-canvassers-Canvasser
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-canvasser db/*db* p))
      :message
      "Error while fetching canvasser record"
      :error-return
      {:warnings ["Error while fetching canvasser record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :electors
     (support/do-or-log-error
      (db/list-electors db/*db*)
      :message
      "Error while fetching elector record"),
     :addresses
     (support/do-or-log-error
      (db/list-addresses db/*db*)
      :message
      "Error while fetching address record"),
     :authorities
     (support/do-or-log-error
      (db/list-authorities db/*db*)
      :message
      "Error while fetching authority record"),
     :roles
     (support/do-or-log-error
      (db/list-roles db/*db*)
      :message
      "Error while fetching role record")})]
  (l/render
   (support/resolve-template "form-canvassers-Canvasser.html")
   (:session 'r)
   (merge {:title "Canvasser", :params p} c))))

(defn
 list-districts-Districts
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"id" "name"} (keys p))
      (support/do-or-log-error
       (db/search-strings-district db/*db* p)
       :message
       "Error while searching district records"
       :error-return
       {:warnings ["Error while searching district records"]})
      (support/do-or-log-error
       (db/list-districts db/*db* {})
       :message
       "Error while fetching district records"
       :error-return
       {:warnings ["Error while fetching district records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-districts-Districts.html")
   (:session 'r)
   (merge {:title "Districts", :params p} c))))

(defn
 form-districts-District
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-district db/*db* p))
      :message
      "Error while fetching district record"
      :error-return
      {:warnings ["Error while fetching district record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template "form-districts-District.html")
   (:session 'r)
   (merge {:title "District", :params p} c))))

(defn
 list-dwellings-Dwellings
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"sub-address" "address_id" "id"} (keys p))
      (support/do-or-log-error
       (db/search-strings-dwelling db/*db* p)
       :message
       "Error while searching dwelling records"
       :error-return
       {:warnings ["Error while searching dwelling records"]})
      (support/do-or-log-error
       (db/list-dwellings db/*db* {})
       :message
       "Error while fetching dwelling records"
       :error-return
       {:warnings ["Error while fetching dwelling records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-dwellings-Dwellings.html")
   (:session 'r)
   (merge {:title "Dwellings", :params p} c))))

(defn
 form-dwellings-Dwelling
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-dwelling db/*db* p))
      :message
      "Error while fetching dwelling record"
      :error-return
      {:warnings ["Error while fetching dwelling record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :addresses
     (support/do-or-log-error
      (db/list-addresses db/*db*)
      :message
      "Error while fetching address record")})]
  (l/render
   (support/resolve-template "form-dwellings-Dwelling.html")
   (:session 'r)
   (merge {:title "Dwelling", :params p} c))))

(defn
 list-electors-Electors
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"id" "gender" "email" "name" "dwelling_id" "phone"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-elector db/*db* p)
       :message
       "Error while searching elector records"
       :error-return
       {:warnings ["Error while searching elector records"]})
      (support/do-or-log-error
       (db/list-electors db/*db* {})
       :message
       "Error while fetching elector records"
       :error-return
       {:warnings ["Error while fetching elector records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-electors-Electors.html")
   (:session 'r)
   (merge {:title "Electors", :params p} c))))

(defn
 form-electors-Elector
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-elector db/*db* p))
      :message
      "Error while fetching elector record"
      :error-return
      {:warnings ["Error while fetching elector record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :dwellings
     (support/do-or-log-error
      (db/list-dwellings db/*db*)
      :message
      "Error while fetching dwelling record"),
     :genders
     (support/do-or-log-error
      (db/list-genders db/*db*)
      :message
      "Error while fetching gender record")})]
  (l/render
   (support/resolve-template "form-electors-Elector.html")
   (:session 'r)
   (merge {:title "Elector", :params p} c))))

(defn
 list-followupactions-Followupactions
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"request_id" "id" "closed" "date" "notes" "actor"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-followupaction db/*db* p)
       :message
       "Error while searching followupaction records"
       :error-return
       {:warnings ["Error while searching followupaction records"]})
      (support/do-or-log-error
       (db/list-followupactions db/*db* {})
       :message
       "Error while fetching followupaction records"
       :error-return
       {:warnings ["Error while fetching followupaction records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template
    "list-followupactions-Followupactions.html")
   (:session 'r)
   (merge {:title "Followupactions", :params p} c))))

(defn
 form-followupactions-Followupaction
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if
       (subset? #{"id"} #{p keys})
       (db/get-followupaction db/*db* p))
      :message
      "Error while fetching followupaction record"
      :error-return
      {:warnings ["Error while fetching followupaction record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :followuprequests
     (support/do-or-log-error
      (db/list-followuprequests db/*db*)
      :message
      "Error while fetching followuprequest record"),
     :canvassers
     (support/do-or-log-error
      (db/list-canvassers db/*db*)
      :message
      "Error while fetching canvasser record")})]
  (l/render
   (support/resolve-template
    "form-followupactions-Followupaction.html")
   (:session 'r)
   (merge {:title "Followupaction", :params p} c))))

(defn
 list-followupmethods-Followupmethods
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"id"} (keys p))
      (support/do-or-log-error
       (db/search-strings-followupmethod db/*db* p)
       :message
       "Error while searching followupmethod records"
       :error-return
       {:warnings ["Error while searching followupmethod records"]})
      (support/do-or-log-error
       (db/list-followupmethods db/*db* {})
       :message
       "Error while fetching followupmethod records"
       :error-return
       {:warnings ["Error while fetching followupmethod records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template
    "list-followupmethods-Followupmethods.html")
   (:session 'r)
   (merge {:title "Followupmethods", :params p} c))))

(defn
 form-followupmethods-Followupmethod
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if
       (subset? #{"id"} #{p keys})
       (db/get-followupmethod db/*db* p))
      :message
      "Error while fetching followupmethod record"
      :error-return
      {:warnings ["Error while fetching followupmethod record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template
    "form-followupmethods-Followupmethod.html")
   (:session 'r)
   (merge {:title "Followupmethod", :params p} c))))

(defn
 list-followuprequests-Followuprequests
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"elector_id" "id" "issue_id" "visit_id" "method_id"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-followuprequest db/*db* p)
       :message
       "Error while searching followuprequest records"
       :error-return
       {:warnings ["Error while searching followuprequest records"]})
      (support/do-or-log-error
       (db/list-followuprequests db/*db* {})
       :message
       "Error while fetching followuprequest records"
       :error-return
       {:warnings ["Error while fetching followuprequest records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template
    "list-followuprequests-Followuprequests.html")
   (:session 'r)
   (merge {:title "Followuprequests", :params p} c))))

(defn
 form-followuprequests-Followuprequest
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if
       (subset? #{"id"} #{p keys})
       (db/get-followuprequest db/*db* p))
      :message
      "Error while fetching followuprequest record"
      :error-return
      {:warnings ["Error while fetching followuprequest record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :electors
     (support/do-or-log-error
      (db/list-electors db/*db*)
      :message
      "Error while fetching elector record"),
     :visits
     (support/do-or-log-error
      (db/list-visits db/*db*)
      :message
      "Error while fetching visit record"),
     :issues
     (support/do-or-log-error
      (db/list-issues db/*db*)
      :message
      "Error while fetching issue record"),
     :followupmethods
     (support/do-or-log-error
      (db/list-followupmethods db/*db*)
      :message
      "Error while fetching followupmethod record")})]
  (l/render
   (support/resolve-template
    "form-followuprequests-Followuprequest.html")
   (:session 'r)
   (merge {:title "Followuprequest", :params p} c))))

(defn
 list-genders-Genders
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"id"} (keys p))
      (support/do-or-log-error
       (db/search-strings-gender db/*db* p)
       :message
       "Error while searching gender records"
       :error-return
       {:warnings ["Error while searching gender records"]})
      (support/do-or-log-error
       (db/list-genders db/*db* {})
       :message
       "Error while fetching gender records"
       :error-return
       {:warnings ["Error while fetching gender records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-genders-Genders.html")
   (:session 'r)
   (merge {:title "Genders", :params p} c))))

(defn
 form-genders-Gender
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-gender db/*db* p))
      :message
      "Error while fetching gender record"
      :error-return
      {:warnings ["Error while fetching gender record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template "form-genders-Gender.html")
   (:session 'r)
   (merge {:title "Gender", :params p} c))))

(defn
 list-intentions-Intentions
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"Id"}))
   c
   (let
    [records
     (if
      (some
       #{"elector_id" "option_id" "locality" "visit_id" "Id"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-intention db/*db* p)
       :message
       "Error while searching intention records"
       :error-return
       {:warnings ["Error while searching intention records"]})
      (support/do-or-log-error
       (db/list-intentions db/*db* {})
       :message
       "Error while fetching intention records"
       :error-return
       {:warnings ["Error while fetching intention records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-intentions-Intentions.html")
   (:session 'r)
   (merge {:title "Intentions", :params p} c))))

(defn
 form-intentions-Intention
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"Id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"Id"} #{p keys}) (db/get-intention db/*db* p))
      :message
      "Error while fetching intention record"
      :error-return
      {:warnings ["Error while fetching intention record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :visits
     (support/do-or-log-error
      (db/list-visits db/*db*)
      :message
      "Error while fetching visit record"),
     :electors
     (support/do-or-log-error
      (db/list-electors db/*db*)
      :message
      "Error while fetching elector record"),
     :options
     (support/do-or-log-error
      (db/list-options db/*db*)
      :message
      "Error while fetching option record")})]
  (l/render
   (support/resolve-template "form-intentions-Intention.html")
   (:session 'r)
   (merge {:title "Intention", :params p} c))))

(defn
 list-issues-Issues
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"url" "id" "current"} (keys p))
      (support/do-or-log-error
       (db/search-strings-issue db/*db* p)
       :message
       "Error while searching issue records"
       :error-return
       {:warnings ["Error while searching issue records"]})
      (support/do-or-log-error
       (db/list-issues db/*db* {})
       :message
       "Error while fetching issue records"
       :error-return
       {:warnings ["Error while fetching issue records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-issues-Issues.html")
   (:session 'r)
   (merge {:title "Issues", :params p} c))))

(defn
 form-issues-Issue
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-issue db/*db* p))
      :message
      "Error while fetching issue record"
      :error-return
      {:warnings ["Error while fetching issue record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template "form-issues-Issue.html")
   (:session 'r)
   (merge {:title "Issue", :params p} c))))

(defn
 list-options-Options
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"id"} (keys p))
      (support/do-or-log-error
       (db/search-strings-option db/*db* p)
       :message
       "Error while searching option records"
       :error-return
       {:warnings ["Error while searching option records"]})
      (support/do-or-log-error
       (db/list-options db/*db* {})
       :message
       "Error while fetching option records"
       :error-return
       {:warnings ["Error while fetching option records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-options-Options.html")
   (:session 'r)
   (merge {:title "Options", :params p} c))))

(defn
 form-options-Option
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-option db/*db* p))
      :message
      "Error while fetching option record"
      :error-return
      {:warnings ["Error while fetching option record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil)})]
  (l/render
   (support/resolve-template "form-options-Option.html")
   (:session 'r)
   (merge {:title "Option", :params p} c))))

(defn
 list-roles-Roles
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"members" "id" "name"} (keys p))
      (support/do-or-log-error
       (db/search-strings-role db/*db* p)
       :message
       "Error while searching role records"
       :error-return
       {:warnings ["Error while searching role records"]})
      (support/do-or-log-error
       (db/list-roles db/*db* {})
       :message
       "Error while fetching role records"
       :error-return
       {:warnings ["Error while fetching role records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-roles-Roles.html")
   (:session 'r)
   (merge {:title "Roles", :params p} c))))

(defn
 form-roles-Role
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-role db/*db* p))
      :message
      "Error while fetching role record"
      :error-return
      {:warnings ["Error while fetching role record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :canvassers
     (support/do-or-log-error
      (db/list-canvassers db/*db*)
      :message
      "Error while fetching canvasser record")})]
  (l/render
   (support/resolve-template "form-roles-Role.html")
   (:session 'r)
   (merge {:title "Role", :params p} c))))

(defn
 list-teams-Teams
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some
       #{"organisers" "district_id" "members" "longitude" "id"
         "latitude" "name"}
       (keys p))
      (support/do-or-log-error
       (db/search-strings-team db/*db* p)
       :message
       "Error while searching team records"
       :error-return
       {:warnings ["Error while searching team records"]})
      (support/do-or-log-error
       (db/list-teams db/*db* {})
       :message
       "Error while fetching team records"
       :error-return
       {:warnings ["Error while fetching team records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-teams-Teams.html")
   (:session 'r)
   (merge {:title "Teams", :params p} c))))

(defn
 form-teams-Team
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-team db/*db* p))
      :message
      "Error while fetching team record"
      :error-return
      {:warnings ["Error while fetching team record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :districts
     (support/do-or-log-error
      (db/list-districts db/*db*)
      :message
      "Error while fetching district record"),
     :canvassers
     (support/do-or-log-error
      (db/list-canvassers db/*db*)
      :message
      "Error while fetching canvasser record")})]
  (l/render
   (support/resolve-template "form-teams-Team.html")
   (:session 'r)
   (merge {:title "Team", :params p} c))))

(defn
 list-visits-Visits
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [records
     (if
      (some #{"address_id" "id" "canvasser_id" "date"} (keys p))
      (support/do-or-log-error
       (db/search-strings-visit db/*db* p)
       :message
       "Error while searching visit records"
       :error-return
       {:warnings ["Error while searching visit records"]})
      (support/do-or-log-error
       (db/list-visits db/*db* {})
       :message
       "Error while fetching visit records"
       :error-return
       {:warnings ["Error while fetching visit records"]}))]
    (if (:warnings records) records {:records records}))]
  (l/render
   (support/resolve-template "list-visits-Visits.html")
   (:session 'r)
   (merge {:title "Visits", :params p} c))))

(defn
 form-visits-Visit
 [r]
 (let
  [p
   (merge
    {:offset 0, :limit 25}
    (support/massage-params (:params r) (:form-params r) #{"id"}))
   c
   (let
    [record
     (support/do-or-log-error
      (if (subset? #{"id"} #{p keys}) (db/get-visit db/*db* p))
      :message
      "Error while fetching visit record"
      :error-return
      {:warnings ["Error while fetching visit record"]})]
    {:warnings (:warnings record),
     :record (assoc record :warnings nil),
     :addresses
     (support/do-or-log-error
      (db/list-addresses db/*db*)
      :message
      "Error while fetching address record"),
     :canvassers
     (support/do-or-log-error
      (db/list-canvassers db/*db*)
      :message
      "Error while fetching canvasser record")})]
  (l/render
   (support/resolve-template "form-visits-Visit.html")
   (:session 'r)
   (merge {:title "Visit", :params p} c))))

(defn
 raw-resolve-handler
 "Prefer the manually-written version of the handler with name `n`, if it exists, to the automatically generated one"
 [n]
 (try
  (eval (symbol (str "youyesyet" ".routes.manual/" n)))
  (catch
   Exception
   _
   (eval (symbol (str "youyesyet" ".routes.auto/" n))))))

(def resolve-handler (memoize raw-resolve-handler))

(defroutes
 auto-selmer-routes
 (GET
  "/admin"
  request
  (route/restricted (apply (resolve-handler "index") (list request))))
 (GET
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (POST
  "/form-addresses-Address"
  request
  (route/restricted
   (apply (resolve-handler "form-addresses-Address") (list request))))
 (GET
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (POST
  "/form-authorities-Authority"
  request
  (route/restricted
   (apply
    (resolve-handler "form-authorities-Authority")
    (list request))))
 (GET
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (POST
  "/form-canvassers-Canvasser"
  request
  (route/restricted
   (apply
    (resolve-handler "form-canvassers-Canvasser")
    (list request))))
 (GET
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (POST
  "/form-districts-District"
  request
  (route/restricted
   (apply (resolve-handler "form-districts-District") (list request))))
 (GET
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (POST
  "/form-dwellings-Dwelling"
  request
  (route/restricted
   (apply (resolve-handler "form-dwellings-Dwelling") (list request))))
 (GET
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (POST
  "/form-electors-Elector"
  request
  (route/restricted
   (apply (resolve-handler "form-electors-Elector") (list request))))
 (GET
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (POST
  "/form-followupactions-Followupaction"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupactions-Followupaction")
    (list request))))
 (GET
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (POST
  "/form-followupmethods-Followupmethod"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followupmethods-Followupmethod")
    (list request))))
 (GET
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (POST
  "/form-followuprequests-Followuprequest"
  request
  (route/restricted
   (apply
    (resolve-handler "form-followuprequests-Followuprequest")
    (list request))))
 (GET
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (POST
  "/form-genders-Gender"
  request
  (route/restricted
   (apply (resolve-handler "form-genders-Gender") (list request))))
 (GET
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (POST
  "/form-intentions-Intention"
  request
  (route/restricted
   (apply
    (resolve-handler "form-intentions-Intention")
    (list request))))
 (GET
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (POST
  "/form-issues-Issue"
  request
  (route/restricted
   (apply (resolve-handler "form-issues-Issue") (list request))))
 (GET
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (POST
  "/form-options-Option"
  request
  (route/restricted
   (apply (resolve-handler "form-options-Option") (list request))))
 (GET
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (POST
  "/form-roles-Role"
  request
  (route/restricted
   (apply (resolve-handler "form-roles-Role") (list request))))
 (GET
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (POST
  "/form-teams-Team"
  request
  (route/restricted
   (apply (resolve-handler "form-teams-Team") (list request))))
 (GET
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (POST
  "/form-visits-Visit"
  request
  (route/restricted
   (apply (resolve-handler "form-visits-Visit") (list request))))
 (GET
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (POST
  "/list-addresses-Addresses"
  request
  (route/restricted
   (apply
    (resolve-handler "list-addresses-Addresses")
    (list request))))
 (GET
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (POST
  "/list-authorities-Authorities"
  request
  (route/restricted
   (apply
    (resolve-handler "list-authorities-Authorities")
    (list request))))
 (GET
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (POST
  "/list-canvassers-Canvassers"
  request
  (route/restricted
   (apply
    (resolve-handler "list-canvassers-Canvassers")
    (list request))))
 (GET
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (POST
  "/list-districts-Districts"
  request
  (route/restricted
   (apply
    (resolve-handler "list-districts-Districts")
    (list request))))
 (GET
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (POST
  "/list-dwellings-Dwellings"
  request
  (route/restricted
   (apply
    (resolve-handler "list-dwellings-Dwellings")
    (list request))))
 (GET
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (POST
  "/list-electors-Electors"
  request
  (route/restricted
   (apply (resolve-handler "list-electors-Electors") (list request))))
 (GET
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (POST
  "/list-followupactions-Followupactions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupactions-Followupactions")
    (list request))))
 (GET
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (POST
  "/list-followupmethods-Followupmethods"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followupmethods-Followupmethods")
    (list request))))
 (GET
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (POST
  "/list-followuprequests-Followuprequests"
  request
  (route/restricted
   (apply
    (resolve-handler "list-followuprequests-Followuprequests")
    (list request))))
 (GET
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (POST
  "/list-genders-Genders"
  request
  (route/restricted
   (apply (resolve-handler "list-genders-Genders") (list request))))
 (GET
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (POST
  "/list-intentions-Intentions"
  request
  (route/restricted
   (apply
    (resolve-handler "list-intentions-Intentions")
    (list request))))
 (GET
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (POST
  "/list-issues-Issues"
  request
  (route/restricted
   (apply (resolve-handler "list-issues-Issues") (list request))))
 (GET
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (POST
  "/list-options-Options"
  request
  (route/restricted
   (apply (resolve-handler "list-options-Options") (list request))))
 (GET
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (POST
  "/list-roles-Roles"
  request
  (route/restricted
   (apply (resolve-handler "list-roles-Roles") (list request))))
 (GET
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (POST
  "/list-teams-Teams"
  request
  (route/restricted
   (apply (resolve-handler "list-teams-Teams") (list request))))
 (GET
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request))))
 (POST
  "/list-visits-Visits"
  request
  (route/restricted
   (apply (resolve-handler "list-visits-Visits") (list request)))))

